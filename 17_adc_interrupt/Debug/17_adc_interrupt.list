
17_adc_interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000016a0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08001760  08001760  00011760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800180c  0800180c  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  0800180c  0800180c  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800180c  0800180c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800180c  0800180c  0001180c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001810  08001810  00011810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08001814  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000038  20000068  0800187c  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a0  0800187c  000200a0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001dbf  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000aa0  00000000  00000000  00021e4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002e0  00000000  00000000  000228f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000258  00000000  00000000  00022bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000107cf  00000000  00000000  00022e28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003fd1  00000000  00000000  000335f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00060d8f  00000000  00000000  000375c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00098357  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001028  00000000  00000000  000983a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001748 	.word	0x08001748

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08001748 	.word	0x08001748

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
 800023a:	0002      	movs	r2, r0
 800023c:	1dfb      	adds	r3, r7, #7
 800023e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000240:	1dfb      	adds	r3, r7, #7
 8000242:	781b      	ldrb	r3, [r3, #0]
 8000244:	2b7f      	cmp	r3, #127	; 0x7f
 8000246:	d809      	bhi.n	800025c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000248:	1dfb      	adds	r3, r7, #7
 800024a:	781b      	ldrb	r3, [r3, #0]
 800024c:	001a      	movs	r2, r3
 800024e:	231f      	movs	r3, #31
 8000250:	401a      	ands	r2, r3
 8000252:	4b04      	ldr	r3, [pc, #16]	; (8000264 <__NVIC_EnableIRQ+0x30>)
 8000254:	2101      	movs	r1, #1
 8000256:	4091      	lsls	r1, r2
 8000258:	000a      	movs	r2, r1
 800025a:	601a      	str	r2, [r3, #0]
  }
}
 800025c:	46c0      	nop			; (mov r8, r8)
 800025e:	46bd      	mov	sp, r7
 8000260:	b002      	add	sp, #8
 8000262:	bd80      	pop	{r7, pc}
 8000264:	e000e100 	.word	0xe000e100

08000268 <PA1_adc_interrupt_init>:
#define ADC_EOCIE (1U<<2)
//PA1 is ADC1 (channel 1)


void PA1_adc_interrupt_init(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	af00      	add	r7, sp, #0
	//Configure ADC GPIO pin
	//Enable clock access to ADC GPIO A
	RCC->AHBENR	|= GPIOAEN;
 800026c:	4b1a      	ldr	r3, [pc, #104]	; (80002d8 <PA1_adc_interrupt_init+0x70>)
 800026e:	695a      	ldr	r2, [r3, #20]
 8000270:	4b19      	ldr	r3, [pc, #100]	; (80002d8 <PA1_adc_interrupt_init+0x70>)
 8000272:	2180      	movs	r1, #128	; 0x80
 8000274:	0289      	lsls	r1, r1, #10
 8000276:	430a      	orrs	r2, r1
 8000278:	615a      	str	r2, [r3, #20]
	//set the mode to PA1 to analog
	GPIOA->MODER |= (1U<<2);
 800027a:	2390      	movs	r3, #144	; 0x90
 800027c:	05db      	lsls	r3, r3, #23
 800027e:	681a      	ldr	r2, [r3, #0]
 8000280:	2390      	movs	r3, #144	; 0x90
 8000282:	05db      	lsls	r3, r3, #23
 8000284:	2104      	movs	r1, #4
 8000286:	430a      	orrs	r2, r1
 8000288:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (1U<<3);
 800028a:	2390      	movs	r3, #144	; 0x90
 800028c:	05db      	lsls	r3, r3, #23
 800028e:	681a      	ldr	r2, [r3, #0]
 8000290:	2390      	movs	r3, #144	; 0x90
 8000292:	05db      	lsls	r3, r3, #23
 8000294:	2108      	movs	r1, #8
 8000296:	430a      	orrs	r2, r1
 8000298:	601a      	str	r2, [r3, #0]
	//configure ADC module
	//enable clock access to ADC
	RCC->APB2ENR |= ADC_EN_RCC;
 800029a:	4b0f      	ldr	r3, [pc, #60]	; (80002d8 <PA1_adc_interrupt_init+0x70>)
 800029c:	699a      	ldr	r2, [r3, #24]
 800029e:	4b0e      	ldr	r3, [pc, #56]	; (80002d8 <PA1_adc_interrupt_init+0x70>)
 80002a0:	2180      	movs	r1, #128	; 0x80
 80002a2:	0089      	lsls	r1, r1, #2
 80002a4:	430a      	orrs	r2, r1
 80002a6:	619a      	str	r2, [r3, #24]
	//Enable ADC1 End of conversion interrupt
	ADC1->IER |= ADC_EOCIE;
 80002a8:	4b0c      	ldr	r3, [pc, #48]	; (80002dc <PA1_adc_interrupt_init+0x74>)
 80002aa:	685a      	ldr	r2, [r3, #4]
 80002ac:	4b0b      	ldr	r3, [pc, #44]	; (80002dc <PA1_adc_interrupt_init+0x74>)
 80002ae:	2104      	movs	r1, #4
 80002b0:	430a      	orrs	r2, r1
 80002b2:	605a      	str	r2, [r3, #4]
	//Enable ADC1 interrupt in NVIC
	NVIC_EnableIRQ(ADC1_IRQn);
 80002b4:	200c      	movs	r0, #12
 80002b6:	f7ff ffbd 	bl	8000234 <__NVIC_EnableIRQ>
	//configure ADC parameters
	//select the channel that needs to be converted
	ADC1->CHSELR |= ADC_CH1;
 80002ba:	4b08      	ldr	r3, [pc, #32]	; (80002dc <PA1_adc_interrupt_init+0x74>)
 80002bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80002be:	4b07      	ldr	r3, [pc, #28]	; (80002dc <PA1_adc_interrupt_init+0x74>)
 80002c0:	2102      	movs	r1, #2
 80002c2:	430a      	orrs	r2, r1
 80002c4:	629a      	str	r2, [r3, #40]	; 0x28
	//enable ADC
	ADC1->CR |= 	ADC_EN;
 80002c6:	4b05      	ldr	r3, [pc, #20]	; (80002dc <PA1_adc_interrupt_init+0x74>)
 80002c8:	689a      	ldr	r2, [r3, #8]
 80002ca:	4b04      	ldr	r3, [pc, #16]	; (80002dc <PA1_adc_interrupt_init+0x74>)
 80002cc:	2101      	movs	r1, #1
 80002ce:	430a      	orrs	r2, r1
 80002d0:	609a      	str	r2, [r3, #8]
	//conversion sampling time adjustment register
	//ADC->SMPR
}
 80002d2:	46c0      	nop			; (mov r8, r8)
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bd80      	pop	{r7, pc}
 80002d8:	40021000 	.word	0x40021000
 80002dc:	40012400 	.word	0x40012400

080002e0 <start_conversion>:
	//conversion sampling time adjustment register
	//ADC1->SMPR
}

void start_conversion(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
	//Enable continuous conversion mode
	ADC1->CFGR1 |= ADC_CONT;
 80002e4:	4b07      	ldr	r3, [pc, #28]	; (8000304 <start_conversion+0x24>)
 80002e6:	68da      	ldr	r2, [r3, #12]
 80002e8:	4b06      	ldr	r3, [pc, #24]	; (8000304 <start_conversion+0x24>)
 80002ea:	2180      	movs	r1, #128	; 0x80
 80002ec:	0189      	lsls	r1, r1, #6
 80002ee:	430a      	orrs	r2, r1
 80002f0:	60da      	str	r2, [r3, #12]
	//Begin ADC conversion
	ADC1->CR |= ADC_START;
 80002f2:	4b04      	ldr	r3, [pc, #16]	; (8000304 <start_conversion+0x24>)
 80002f4:	689a      	ldr	r2, [r3, #8]
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <start_conversion+0x24>)
 80002f8:	2104      	movs	r1, #4
 80002fa:	430a      	orrs	r2, r1
 80002fc:	609a      	str	r2, [r3, #8]
}
 80002fe:	46c0      	nop			; (mov r8, r8)
 8000300:	46bd      	mov	sp, r7
 8000302:	bd80      	pop	{r7, pc}
 8000304:	40012400 	.word	0x40012400

08000308 <main>:

uint32_t sensor_value;
static void adc_callback(void);

int main (void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
	uart2_rxtx_init();
 800030c:	f000 f8f6 	bl	80004fc <uart2_rxtx_init>
	PA1_adc_interrupt_init();
 8000310:	f7ff ffaa 	bl	8000268 <PA1_adc_interrupt_init>
	start_conversion();
 8000314:	f7ff ffe4 	bl	80002e0 <start_conversion>
		while(1)
 8000318:	e7fe      	b.n	8000318 <main+0x10>
	...

0800031c <adc_callback>:

		}
}

static void adc_callback(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
	sensor_value = ADC1->DR;
 8000320:	4b07      	ldr	r3, [pc, #28]	; (8000340 <adc_callback+0x24>)
 8000322:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000324:	4b07      	ldr	r3, [pc, #28]	; (8000344 <adc_callback+0x28>)
 8000326:	601a      	str	r2, [r3, #0]
	printf("Sensor Value :%d \n\r", (int)sensor_value);
 8000328:	4b06      	ldr	r3, [pc, #24]	; (8000344 <adc_callback+0x28>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	001a      	movs	r2, r3
 800032e:	4b06      	ldr	r3, [pc, #24]	; (8000348 <adc_callback+0x2c>)
 8000330:	0011      	movs	r1, r2
 8000332:	0018      	movs	r0, r3
 8000334:	f000 fa30 	bl	8000798 <iprintf>
}
 8000338:	46c0      	nop			; (mov r8, r8)
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}
 800033e:	46c0      	nop			; (mov r8, r8)
 8000340:	40012400 	.word	0x40012400
 8000344:	20000084 	.word	0x20000084
 8000348:	08001760 	.word	0x08001760

0800034c <ADC1_IRQHandler>:

void ADC1_IRQHandler(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0
	//Check if the End of Conversion flag is raised (Interrupt Trigger)
	if((ADC1->ISR & ADC_EOC) != 0)
 8000350:	4b07      	ldr	r3, [pc, #28]	; (8000370 <ADC1_IRQHandler+0x24>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	2204      	movs	r2, #4
 8000356:	4013      	ands	r3, r2
 8000358:	d007      	beq.n	800036a <ADC1_IRQHandler+0x1e>
	{
		//Clear EOC flag
		ADC1->ISR &= ~ADC_EOC;
 800035a:	4b05      	ldr	r3, [pc, #20]	; (8000370 <ADC1_IRQHandler+0x24>)
 800035c:	681a      	ldr	r2, [r3, #0]
 800035e:	4b04      	ldr	r3, [pc, #16]	; (8000370 <ADC1_IRQHandler+0x24>)
 8000360:	2104      	movs	r1, #4
 8000362:	438a      	bics	r2, r1
 8000364:	601a      	str	r2, [r3, #0]

		//Function
		adc_callback();
 8000366:	f7ff ffd9 	bl	800031c <adc_callback>
	}
}
 800036a:	46c0      	nop			; (mov r8, r8)
 800036c:	46bd      	mov	sp, r7
 800036e:	bd80      	pop	{r7, pc}
 8000370:	40012400 	.word	0x40012400

08000374 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000378:	e7fe      	b.n	8000378 <NMI_Handler+0x4>

0800037a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800037a:	b580      	push	{r7, lr}
 800037c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800037e:	e7fe      	b.n	800037e <HardFault_Handler+0x4>

08000380 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000384:	46c0      	nop			; (mov r8, r8)
 8000386:	46bd      	mov	sp, r7
 8000388:	bd80      	pop	{r7, pc}

0800038a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800038a:	b580      	push	{r7, lr}
 800038c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800038e:	46c0      	nop			; (mov r8, r8)
 8000390:	46bd      	mov	sp, r7
 8000392:	bd80      	pop	{r7, pc}

08000394 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000398:	f000 f9ba 	bl	8000710 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800039c:	46c0      	nop			; (mov r8, r8)
 800039e:	46bd      	mov	sp, r7
 80003a0:	bd80      	pop	{r7, pc}

080003a2 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80003a2:	b580      	push	{r7, lr}
 80003a4:	b086      	sub	sp, #24
 80003a6:	af00      	add	r7, sp, #0
 80003a8:	60f8      	str	r0, [r7, #12]
 80003aa:	60b9      	str	r1, [r7, #8]
 80003ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003ae:	2300      	movs	r3, #0
 80003b0:	617b      	str	r3, [r7, #20]
 80003b2:	e00a      	b.n	80003ca <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80003b4:	e000      	b.n	80003b8 <_read+0x16>
 80003b6:	bf00      	nop
 80003b8:	0001      	movs	r1, r0
 80003ba:	68bb      	ldr	r3, [r7, #8]
 80003bc:	1c5a      	adds	r2, r3, #1
 80003be:	60ba      	str	r2, [r7, #8]
 80003c0:	b2ca      	uxtb	r2, r1
 80003c2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003c4:	697b      	ldr	r3, [r7, #20]
 80003c6:	3301      	adds	r3, #1
 80003c8:	617b      	str	r3, [r7, #20]
 80003ca:	697a      	ldr	r2, [r7, #20]
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	429a      	cmp	r2, r3
 80003d0:	dbf0      	blt.n	80003b4 <_read+0x12>
  }

  return len;
 80003d2:	687b      	ldr	r3, [r7, #4]
}
 80003d4:	0018      	movs	r0, r3
 80003d6:	46bd      	mov	sp, r7
 80003d8:	b006      	add	sp, #24
 80003da:	bd80      	pop	{r7, pc}

080003dc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b086      	sub	sp, #24
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	60f8      	str	r0, [r7, #12]
 80003e4:	60b9      	str	r1, [r7, #8]
 80003e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003e8:	2300      	movs	r3, #0
 80003ea:	617b      	str	r3, [r7, #20]
 80003ec:	e009      	b.n	8000402 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80003ee:	68bb      	ldr	r3, [r7, #8]
 80003f0:	1c5a      	adds	r2, r3, #1
 80003f2:	60ba      	str	r2, [r7, #8]
 80003f4:	781b      	ldrb	r3, [r3, #0]
 80003f6:	0018      	movs	r0, r3
 80003f8:	f000 f873 	bl	80004e2 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003fc:	697b      	ldr	r3, [r7, #20]
 80003fe:	3301      	adds	r3, #1
 8000400:	617b      	str	r3, [r7, #20]
 8000402:	697a      	ldr	r2, [r7, #20]
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	429a      	cmp	r2, r3
 8000408:	dbf1      	blt.n	80003ee <_write+0x12>
  }
  return len;
 800040a:	687b      	ldr	r3, [r7, #4]
}
 800040c:	0018      	movs	r0, r3
 800040e:	46bd      	mov	sp, r7
 8000410:	b006      	add	sp, #24
 8000412:	bd80      	pop	{r7, pc}

08000414 <_close>:

int _close(int file)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b082      	sub	sp, #8
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800041c:	2301      	movs	r3, #1
 800041e:	425b      	negs	r3, r3
}
 8000420:	0018      	movs	r0, r3
 8000422:	46bd      	mov	sp, r7
 8000424:	b002      	add	sp, #8
 8000426:	bd80      	pop	{r7, pc}

08000428 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b082      	sub	sp, #8
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
 8000430:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000432:	683b      	ldr	r3, [r7, #0]
 8000434:	2280      	movs	r2, #128	; 0x80
 8000436:	0192      	lsls	r2, r2, #6
 8000438:	605a      	str	r2, [r3, #4]
  return 0;
 800043a:	2300      	movs	r3, #0
}
 800043c:	0018      	movs	r0, r3
 800043e:	46bd      	mov	sp, r7
 8000440:	b002      	add	sp, #8
 8000442:	bd80      	pop	{r7, pc}

08000444 <_isatty>:

int _isatty(int file)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b082      	sub	sp, #8
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800044c:	2301      	movs	r3, #1
}
 800044e:	0018      	movs	r0, r3
 8000450:	46bd      	mov	sp, r7
 8000452:	b002      	add	sp, #8
 8000454:	bd80      	pop	{r7, pc}

08000456 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000456:	b580      	push	{r7, lr}
 8000458:	b084      	sub	sp, #16
 800045a:	af00      	add	r7, sp, #0
 800045c:	60f8      	str	r0, [r7, #12]
 800045e:	60b9      	str	r1, [r7, #8]
 8000460:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000462:	2300      	movs	r3, #0
}
 8000464:	0018      	movs	r0, r3
 8000466:	46bd      	mov	sp, r7
 8000468:	b004      	add	sp, #16
 800046a:	bd80      	pop	{r7, pc}

0800046c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b086      	sub	sp, #24
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000474:	4a14      	ldr	r2, [pc, #80]	; (80004c8 <_sbrk+0x5c>)
 8000476:	4b15      	ldr	r3, [pc, #84]	; (80004cc <_sbrk+0x60>)
 8000478:	1ad3      	subs	r3, r2, r3
 800047a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800047c:	697b      	ldr	r3, [r7, #20]
 800047e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000480:	4b13      	ldr	r3, [pc, #76]	; (80004d0 <_sbrk+0x64>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	2b00      	cmp	r3, #0
 8000486:	d102      	bne.n	800048e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000488:	4b11      	ldr	r3, [pc, #68]	; (80004d0 <_sbrk+0x64>)
 800048a:	4a12      	ldr	r2, [pc, #72]	; (80004d4 <_sbrk+0x68>)
 800048c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800048e:	4b10      	ldr	r3, [pc, #64]	; (80004d0 <_sbrk+0x64>)
 8000490:	681a      	ldr	r2, [r3, #0]
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	18d3      	adds	r3, r2, r3
 8000496:	693a      	ldr	r2, [r7, #16]
 8000498:	429a      	cmp	r2, r3
 800049a:	d207      	bcs.n	80004ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800049c:	f000 f94a 	bl	8000734 <__errno>
 80004a0:	0003      	movs	r3, r0
 80004a2:	220c      	movs	r2, #12
 80004a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80004a6:	2301      	movs	r3, #1
 80004a8:	425b      	negs	r3, r3
 80004aa:	e009      	b.n	80004c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80004ac:	4b08      	ldr	r3, [pc, #32]	; (80004d0 <_sbrk+0x64>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80004b2:	4b07      	ldr	r3, [pc, #28]	; (80004d0 <_sbrk+0x64>)
 80004b4:	681a      	ldr	r2, [r3, #0]
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	18d2      	adds	r2, r2, r3
 80004ba:	4b05      	ldr	r3, [pc, #20]	; (80004d0 <_sbrk+0x64>)
 80004bc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80004be:	68fb      	ldr	r3, [r7, #12]
}
 80004c0:	0018      	movs	r0, r3
 80004c2:	46bd      	mov	sp, r7
 80004c4:	b006      	add	sp, #24
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	20004000 	.word	0x20004000
 80004cc:	00000400 	.word	0x00000400
 80004d0:	20000088 	.word	0x20000088
 80004d4:	200000a0 	.word	0x200000a0

080004d8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80004dc:	46c0      	nop			; (mov r8, r8)
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}

080004e2 <__io_putchar>:

void uart2_write(int ch);


int __io_putchar(int ch) //for redirecting printf
{
 80004e2:	b580      	push	{r7, lr}
 80004e4:	b082      	sub	sp, #8
 80004e6:	af00      	add	r7, sp, #0
 80004e8:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	0018      	movs	r0, r3
 80004ee:	f000 f8a5 	bl	800063c <uart2_write>
	return ch;
 80004f2:	687b      	ldr	r3, [r7, #4]
}
 80004f4:	0018      	movs	r0, r3
 80004f6:	46bd      	mov	sp, r7
 80004f8:	b002      	add	sp, #8
 80004fa:	bd80      	pop	{r7, pc}

080004fc <uart2_rxtx_init>:

void uart2_rxtx_init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
	/*Configure UART2 GPIO pins*/
	//Enable clock access to GPIOA
	RCC->AHBENR	|= GPIO_A_EN;
 8000500:	4b45      	ldr	r3, [pc, #276]	; (8000618 <uart2_rxtx_init+0x11c>)
 8000502:	695a      	ldr	r2, [r3, #20]
 8000504:	4b44      	ldr	r3, [pc, #272]	; (8000618 <uart2_rxtx_init+0x11c>)
 8000506:	2180      	movs	r1, #128	; 0x80
 8000508:	0289      	lsls	r1, r1, #10
 800050a:	430a      	orrs	r2, r1
 800050c:	615a      	str	r2, [r3, #20]
	//set TX pin (PA2) mode to alternate function mode
	GPIOA->MODER &= ~(1U<<4); //bitwise AND(&=), NOT(~) to set it to 0
 800050e:	2390      	movs	r3, #144	; 0x90
 8000510:	05db      	lsls	r3, r3, #23
 8000512:	681a      	ldr	r2, [r3, #0]
 8000514:	2390      	movs	r3, #144	; 0x90
 8000516:	05db      	lsls	r3, r3, #23
 8000518:	2110      	movs	r1, #16
 800051a:	438a      	bics	r2, r1
 800051c:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (1U<<5); //bitwise OR(|=) to set it to 1
 800051e:	2390      	movs	r3, #144	; 0x90
 8000520:	05db      	lsls	r3, r3, #23
 8000522:	681a      	ldr	r2, [r3, #0]
 8000524:	2390      	movs	r3, #144	; 0x90
 8000526:	05db      	lsls	r3, r3, #23
 8000528:	2120      	movs	r1, #32
 800052a:	430a      	orrs	r2, r1
 800052c:	601a      	str	r2, [r3, #0]
	//set RX pin (PA3) mode to alternate function mode
	GPIOA->MODER &= ~(1U<<6); //bitwise AND(&=), NOT(~) to set it to 0
 800052e:	2390      	movs	r3, #144	; 0x90
 8000530:	05db      	lsls	r3, r3, #23
 8000532:	681a      	ldr	r2, [r3, #0]
 8000534:	2390      	movs	r3, #144	; 0x90
 8000536:	05db      	lsls	r3, r3, #23
 8000538:	2140      	movs	r1, #64	; 0x40
 800053a:	438a      	bics	r2, r1
 800053c:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (1U<<7); //bitwise OR(|=) to set it to 1
 800053e:	2390      	movs	r3, #144	; 0x90
 8000540:	05db      	lsls	r3, r3, #23
 8000542:	681a      	ldr	r2, [r3, #0]
 8000544:	2390      	movs	r3, #144	; 0x90
 8000546:	05db      	lsls	r3, r3, #23
 8000548:	2180      	movs	r1, #128	; 0x80
 800054a:	430a      	orrs	r2, r1
 800054c:	601a      	str	r2, [r3, #0]
	//set PA2 alternate function type to UART2_TX (AF1) 0001:AF1 (index 0 for AFRL index 1 for AFRH)
	GPIOA->AFR[0] |= (1U<<8); //bitwise OR(|=) to set it to 1
 800054e:	2390      	movs	r3, #144	; 0x90
 8000550:	05db      	lsls	r3, r3, #23
 8000552:	6a1a      	ldr	r2, [r3, #32]
 8000554:	2390      	movs	r3, #144	; 0x90
 8000556:	05db      	lsls	r3, r3, #23
 8000558:	2180      	movs	r1, #128	; 0x80
 800055a:	0049      	lsls	r1, r1, #1
 800055c:	430a      	orrs	r2, r1
 800055e:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] &= ~(1U<<9); //bitwise AND(&=), NOT(~) to set it to 0
 8000560:	2390      	movs	r3, #144	; 0x90
 8000562:	05db      	lsls	r3, r3, #23
 8000564:	6a1a      	ldr	r2, [r3, #32]
 8000566:	2390      	movs	r3, #144	; 0x90
 8000568:	05db      	lsls	r3, r3, #23
 800056a:	492c      	ldr	r1, [pc, #176]	; (800061c <uart2_rxtx_init+0x120>)
 800056c:	400a      	ands	r2, r1
 800056e:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] &= ~(1U<<10); //bitwise AND(&=), NOT(~) to set it to 0
 8000570:	2390      	movs	r3, #144	; 0x90
 8000572:	05db      	lsls	r3, r3, #23
 8000574:	6a1a      	ldr	r2, [r3, #32]
 8000576:	2390      	movs	r3, #144	; 0x90
 8000578:	05db      	lsls	r3, r3, #23
 800057a:	4929      	ldr	r1, [pc, #164]	; (8000620 <uart2_rxtx_init+0x124>)
 800057c:	400a      	ands	r2, r1
 800057e:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] &= ~(1U<<11); //bitwise AND(&=), NOT(~) to set it to 0
 8000580:	2390      	movs	r3, #144	; 0x90
 8000582:	05db      	lsls	r3, r3, #23
 8000584:	6a1a      	ldr	r2, [r3, #32]
 8000586:	2390      	movs	r3, #144	; 0x90
 8000588:	05db      	lsls	r3, r3, #23
 800058a:	4926      	ldr	r1, [pc, #152]	; (8000624 <uart2_rxtx_init+0x128>)
 800058c:	400a      	ands	r2, r1
 800058e:	621a      	str	r2, [r3, #32]
	//set PA3 alternate function type to UART2_RX (AF1) 0001:AF1 (index 0 for AFRL index 1 for AFRH)
	GPIOA->AFR[0] |= (1U<<12); //bitwise OR(|=) to set it to 1
 8000590:	2390      	movs	r3, #144	; 0x90
 8000592:	05db      	lsls	r3, r3, #23
 8000594:	6a1a      	ldr	r2, [r3, #32]
 8000596:	2390      	movs	r3, #144	; 0x90
 8000598:	05db      	lsls	r3, r3, #23
 800059a:	2180      	movs	r1, #128	; 0x80
 800059c:	0149      	lsls	r1, r1, #5
 800059e:	430a      	orrs	r2, r1
 80005a0:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] &= ~(1U<<13); //bitwise AND(&=), NOT(~) to set it to 0
 80005a2:	2390      	movs	r3, #144	; 0x90
 80005a4:	05db      	lsls	r3, r3, #23
 80005a6:	6a1a      	ldr	r2, [r3, #32]
 80005a8:	2390      	movs	r3, #144	; 0x90
 80005aa:	05db      	lsls	r3, r3, #23
 80005ac:	491e      	ldr	r1, [pc, #120]	; (8000628 <uart2_rxtx_init+0x12c>)
 80005ae:	400a      	ands	r2, r1
 80005b0:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] &= ~(1U<<14); //bitwise AND(&=), NOT(~) to set it to 0
 80005b2:	2390      	movs	r3, #144	; 0x90
 80005b4:	05db      	lsls	r3, r3, #23
 80005b6:	6a1a      	ldr	r2, [r3, #32]
 80005b8:	2390      	movs	r3, #144	; 0x90
 80005ba:	05db      	lsls	r3, r3, #23
 80005bc:	491b      	ldr	r1, [pc, #108]	; (800062c <uart2_rxtx_init+0x130>)
 80005be:	400a      	ands	r2, r1
 80005c0:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] &= ~(1U<<15); //bitwise AND(&=), NOT(~) to set it to 0
 80005c2:	2390      	movs	r3, #144	; 0x90
 80005c4:	05db      	lsls	r3, r3, #23
 80005c6:	6a1a      	ldr	r2, [r3, #32]
 80005c8:	2390      	movs	r3, #144	; 0x90
 80005ca:	05db      	lsls	r3, r3, #23
 80005cc:	4918      	ldr	r1, [pc, #96]	; (8000630 <uart2_rxtx_init+0x134>)
 80005ce:	400a      	ands	r2, r1
 80005d0:	621a      	str	r2, [r3, #32]
	/*Configure UART GPIO pin*/
	//Enable clock access to UART2
	RCC->APB1ENR |= UART2EN;
 80005d2:	4b11      	ldr	r3, [pc, #68]	; (8000618 <uart2_rxtx_init+0x11c>)
 80005d4:	69da      	ldr	r2, [r3, #28]
 80005d6:	4b10      	ldr	r3, [pc, #64]	; (8000618 <uart2_rxtx_init+0x11c>)
 80005d8:	2180      	movs	r1, #128	; 0x80
 80005da:	0289      	lsls	r1, r1, #10
 80005dc:	430a      	orrs	r2, r1
 80005de:	61da      	str	r2, [r3, #28]
	//Configure UART2 baud-rate
	uart_set_baudrate(USART2,APB1_CLK,UART_BAUDRATE);
 80005e0:	2396      	movs	r3, #150	; 0x96
 80005e2:	019b      	lsls	r3, r3, #6
 80005e4:	4913      	ldr	r1, [pc, #76]	; (8000634 <uart2_rxtx_init+0x138>)
 80005e6:	4814      	ldr	r0, [pc, #80]	; (8000638 <uart2_rxtx_init+0x13c>)
 80005e8:	001a      	movs	r2, r3
 80005ea:	f000 f83f 	bl	800066c <uart_set_baudrate>
	//Configure the transfer direction
	USART2->CR1 |= CR1_TE;
 80005ee:	4b12      	ldr	r3, [pc, #72]	; (8000638 <uart2_rxtx_init+0x13c>)
 80005f0:	681a      	ldr	r2, [r3, #0]
 80005f2:	4b11      	ldr	r3, [pc, #68]	; (8000638 <uart2_rxtx_init+0x13c>)
 80005f4:	2108      	movs	r1, #8
 80005f6:	430a      	orrs	r2, r1
 80005f8:	601a      	str	r2, [r3, #0]
	USART2->CR1 |= CR1_RE;
 80005fa:	4b0f      	ldr	r3, [pc, #60]	; (8000638 <uart2_rxtx_init+0x13c>)
 80005fc:	681a      	ldr	r2, [r3, #0]
 80005fe:	4b0e      	ldr	r3, [pc, #56]	; (8000638 <uart2_rxtx_init+0x13c>)
 8000600:	2104      	movs	r1, #4
 8000602:	430a      	orrs	r2, r1
 8000604:	601a      	str	r2, [r3, #0]
	//Enable UART module in control register 1
	USART2->CR1 |= CR1_UART_EN;
 8000606:	4b0c      	ldr	r3, [pc, #48]	; (8000638 <uart2_rxtx_init+0x13c>)
 8000608:	681a      	ldr	r2, [r3, #0]
 800060a:	4b0b      	ldr	r3, [pc, #44]	; (8000638 <uart2_rxtx_init+0x13c>)
 800060c:	2101      	movs	r1, #1
 800060e:	430a      	orrs	r2, r1
 8000610:	601a      	str	r2, [r3, #0]
}
 8000612:	46c0      	nop			; (mov r8, r8)
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	40021000 	.word	0x40021000
 800061c:	fffffdff 	.word	0xfffffdff
 8000620:	fffffbff 	.word	0xfffffbff
 8000624:	fffff7ff 	.word	0xfffff7ff
 8000628:	ffffdfff 	.word	0xffffdfff
 800062c:	ffffbfff 	.word	0xffffbfff
 8000630:	ffff7fff 	.word	0xffff7fff
 8000634:	007a1200 	.word	0x007a1200
 8000638:	40004400 	.word	0x40004400

0800063c <uart2_write>:

	/*read data*/
	return USART2->RDR;
}
void uart2_write(int ch)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
	/*Make sure the transmit data register is empty*/
	while(!(USART2->ISR & SR_TXE)){}
 8000644:	46c0      	nop			; (mov r8, r8)
 8000646:	4b08      	ldr	r3, [pc, #32]	; (8000668 <uart2_write+0x2c>)
 8000648:	69db      	ldr	r3, [r3, #28]
 800064a:	2280      	movs	r2, #128	; 0x80
 800064c:	4013      	ands	r3, r2
 800064e:	d0fa      	beq.n	8000646 <uart2_write+0xa>
	/*Write to transmit data register*/
	USART2->TDR = (ch & 0xFF); //we perform AND operation because we want to transmit eight bits
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	b29b      	uxth	r3, r3
 8000654:	4a04      	ldr	r2, [pc, #16]	; (8000668 <uart2_write+0x2c>)
 8000656:	21ff      	movs	r1, #255	; 0xff
 8000658:	400b      	ands	r3, r1
 800065a:	b29b      	uxth	r3, r3
 800065c:	8513      	strh	r3, [r2, #40]	; 0x28
/*“& 0xff” effectively masks the variable so it leaves only the value in the last 8 bits, and ignores all the rest of the bits*/
}
 800065e:	46c0      	nop			; (mov r8, r8)
 8000660:	46bd      	mov	sp, r7
 8000662:	b002      	add	sp, #8
 8000664:	bd80      	pop	{r7, pc}
 8000666:	46c0      	nop			; (mov r8, r8)
 8000668:	40004400 	.word	0x40004400

0800066c <uart_set_baudrate>:

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t Baudrate)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b084      	sub	sp, #16
 8000670:	af00      	add	r7, sp, #0
 8000672:	60f8      	str	r0, [r7, #12]
 8000674:	60b9      	str	r1, [r7, #8]
 8000676:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_BD(PeriphClk, Baudrate);
 8000678:	687a      	ldr	r2, [r7, #4]
 800067a:	68bb      	ldr	r3, [r7, #8]
 800067c:	0011      	movs	r1, r2
 800067e:	0018      	movs	r0, r3
 8000680:	f000 f808 	bl	8000694 <compute_uart_BD>
 8000684:	0003      	movs	r3, r0
 8000686:	001a      	movs	r2, r3
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	60da      	str	r2, [r3, #12]
}
 800068c:	46c0      	nop			; (mov r8, r8)
 800068e:	46bd      	mov	sp, r7
 8000690:	b004      	add	sp, #16
 8000692:	bd80      	pop	{r7, pc}

08000694 <compute_uart_BD>:
static uint16_t compute_uart_BD(uint32_t PeriphClk, uint32_t Baudrate)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
 800069c:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (Baudrate/2U))/Baudrate);
 800069e:	683b      	ldr	r3, [r7, #0]
 80006a0:	085a      	lsrs	r2, r3, #1
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	18d3      	adds	r3, r2, r3
 80006a6:	6839      	ldr	r1, [r7, #0]
 80006a8:	0018      	movs	r0, r3
 80006aa:	f7ff fd37 	bl	800011c <__udivsi3>
 80006ae:	0003      	movs	r3, r0
 80006b0:	b29b      	uxth	r3, r3
}
 80006b2:	0018      	movs	r0, r3
 80006b4:	46bd      	mov	sp, r7
 80006b6:	b002      	add	sp, #8
 80006b8:	bd80      	pop	{r7, pc}
	...

080006bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006bc:	480d      	ldr	r0, [pc, #52]	; (80006f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006be:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006c0:	480d      	ldr	r0, [pc, #52]	; (80006f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80006c2:	490e      	ldr	r1, [pc, #56]	; (80006fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80006c4:	4a0e      	ldr	r2, [pc, #56]	; (8000700 <LoopForever+0xe>)
  movs r3, #0
 80006c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006c8:	e002      	b.n	80006d0 <LoopCopyDataInit>

080006ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006ce:	3304      	adds	r3, #4

080006d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006d4:	d3f9      	bcc.n	80006ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006d6:	4a0b      	ldr	r2, [pc, #44]	; (8000704 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006d8:	4c0b      	ldr	r4, [pc, #44]	; (8000708 <LoopForever+0x16>)
  movs r3, #0
 80006da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006dc:	e001      	b.n	80006e2 <LoopFillZerobss>

080006de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006e0:	3204      	adds	r2, #4

080006e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006e4:	d3fb      	bcc.n	80006de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80006e6:	f7ff fef7 	bl	80004d8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80006ea:	f000 f829 	bl	8000740 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006ee:	f7ff fe0b 	bl	8000308 <main>

080006f2 <LoopForever>:

LoopForever:
    b LoopForever
 80006f2:	e7fe      	b.n	80006f2 <LoopForever>
  ldr   r0, =_estack
 80006f4:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80006f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006fc:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000700:	08001814 	.word	0x08001814
  ldr r2, =_sbss
 8000704:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000708:	200000a0 	.word	0x200000a0

0800070c <DMA1_Channel1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800070c:	e7fe      	b.n	800070c <DMA1_Channel1_IRQHandler>
	...

08000710 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000714:	4b05      	ldr	r3, [pc, #20]	; (800072c <HAL_IncTick+0x1c>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	001a      	movs	r2, r3
 800071a:	4b05      	ldr	r3, [pc, #20]	; (8000730 <HAL_IncTick+0x20>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	18d2      	adds	r2, r2, r3
 8000720:	4b03      	ldr	r3, [pc, #12]	; (8000730 <HAL_IncTick+0x20>)
 8000722:	601a      	str	r2, [r3, #0]
}
 8000724:	46c0      	nop			; (mov r8, r8)
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	46c0      	nop			; (mov r8, r8)
 800072c:	20000000 	.word	0x20000000
 8000730:	2000008c 	.word	0x2000008c

08000734 <__errno>:
 8000734:	4b01      	ldr	r3, [pc, #4]	; (800073c <__errno+0x8>)
 8000736:	6818      	ldr	r0, [r3, #0]
 8000738:	4770      	bx	lr
 800073a:	46c0      	nop			; (mov r8, r8)
 800073c:	20000004 	.word	0x20000004

08000740 <__libc_init_array>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	2600      	movs	r6, #0
 8000744:	4d0c      	ldr	r5, [pc, #48]	; (8000778 <__libc_init_array+0x38>)
 8000746:	4c0d      	ldr	r4, [pc, #52]	; (800077c <__libc_init_array+0x3c>)
 8000748:	1b64      	subs	r4, r4, r5
 800074a:	10a4      	asrs	r4, r4, #2
 800074c:	42a6      	cmp	r6, r4
 800074e:	d109      	bne.n	8000764 <__libc_init_array+0x24>
 8000750:	2600      	movs	r6, #0
 8000752:	f000 fff9 	bl	8001748 <_init>
 8000756:	4d0a      	ldr	r5, [pc, #40]	; (8000780 <__libc_init_array+0x40>)
 8000758:	4c0a      	ldr	r4, [pc, #40]	; (8000784 <__libc_init_array+0x44>)
 800075a:	1b64      	subs	r4, r4, r5
 800075c:	10a4      	asrs	r4, r4, #2
 800075e:	42a6      	cmp	r6, r4
 8000760:	d105      	bne.n	800076e <__libc_init_array+0x2e>
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	00b3      	lsls	r3, r6, #2
 8000766:	58eb      	ldr	r3, [r5, r3]
 8000768:	4798      	blx	r3
 800076a:	3601      	adds	r6, #1
 800076c:	e7ee      	b.n	800074c <__libc_init_array+0xc>
 800076e:	00b3      	lsls	r3, r6, #2
 8000770:	58eb      	ldr	r3, [r5, r3]
 8000772:	4798      	blx	r3
 8000774:	3601      	adds	r6, #1
 8000776:	e7f2      	b.n	800075e <__libc_init_array+0x1e>
 8000778:	0800180c 	.word	0x0800180c
 800077c:	0800180c 	.word	0x0800180c
 8000780:	0800180c 	.word	0x0800180c
 8000784:	08001810 	.word	0x08001810

08000788 <memset>:
 8000788:	0003      	movs	r3, r0
 800078a:	1882      	adds	r2, r0, r2
 800078c:	4293      	cmp	r3, r2
 800078e:	d100      	bne.n	8000792 <memset+0xa>
 8000790:	4770      	bx	lr
 8000792:	7019      	strb	r1, [r3, #0]
 8000794:	3301      	adds	r3, #1
 8000796:	e7f9      	b.n	800078c <memset+0x4>

08000798 <iprintf>:
 8000798:	b40f      	push	{r0, r1, r2, r3}
 800079a:	4b0b      	ldr	r3, [pc, #44]	; (80007c8 <iprintf+0x30>)
 800079c:	b513      	push	{r0, r1, r4, lr}
 800079e:	681c      	ldr	r4, [r3, #0]
 80007a0:	2c00      	cmp	r4, #0
 80007a2:	d005      	beq.n	80007b0 <iprintf+0x18>
 80007a4:	69a3      	ldr	r3, [r4, #24]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d102      	bne.n	80007b0 <iprintf+0x18>
 80007aa:	0020      	movs	r0, r4
 80007ac:	f000 f870 	bl	8000890 <__sinit>
 80007b0:	ab05      	add	r3, sp, #20
 80007b2:	0020      	movs	r0, r4
 80007b4:	9a04      	ldr	r2, [sp, #16]
 80007b6:	68a1      	ldr	r1, [r4, #8]
 80007b8:	9301      	str	r3, [sp, #4]
 80007ba:	f000 f9cd 	bl	8000b58 <_vfiprintf_r>
 80007be:	bc16      	pop	{r1, r2, r4}
 80007c0:	bc08      	pop	{r3}
 80007c2:	b004      	add	sp, #16
 80007c4:	4718      	bx	r3
 80007c6:	46c0      	nop			; (mov r8, r8)
 80007c8:	20000004 	.word	0x20000004

080007cc <std>:
 80007cc:	2300      	movs	r3, #0
 80007ce:	b510      	push	{r4, lr}
 80007d0:	0004      	movs	r4, r0
 80007d2:	6003      	str	r3, [r0, #0]
 80007d4:	6043      	str	r3, [r0, #4]
 80007d6:	6083      	str	r3, [r0, #8]
 80007d8:	8181      	strh	r1, [r0, #12]
 80007da:	6643      	str	r3, [r0, #100]	; 0x64
 80007dc:	0019      	movs	r1, r3
 80007de:	81c2      	strh	r2, [r0, #14]
 80007e0:	6103      	str	r3, [r0, #16]
 80007e2:	6143      	str	r3, [r0, #20]
 80007e4:	6183      	str	r3, [r0, #24]
 80007e6:	2208      	movs	r2, #8
 80007e8:	305c      	adds	r0, #92	; 0x5c
 80007ea:	f7ff ffcd 	bl	8000788 <memset>
 80007ee:	4b05      	ldr	r3, [pc, #20]	; (8000804 <std+0x38>)
 80007f0:	6224      	str	r4, [r4, #32]
 80007f2:	6263      	str	r3, [r4, #36]	; 0x24
 80007f4:	4b04      	ldr	r3, [pc, #16]	; (8000808 <std+0x3c>)
 80007f6:	62a3      	str	r3, [r4, #40]	; 0x28
 80007f8:	4b04      	ldr	r3, [pc, #16]	; (800080c <std+0x40>)
 80007fa:	62e3      	str	r3, [r4, #44]	; 0x2c
 80007fc:	4b04      	ldr	r3, [pc, #16]	; (8000810 <std+0x44>)
 80007fe:	6323      	str	r3, [r4, #48]	; 0x30
 8000800:	bd10      	pop	{r4, pc}
 8000802:	46c0      	nop			; (mov r8, r8)
 8000804:	080010f5 	.word	0x080010f5
 8000808:	0800111d 	.word	0x0800111d
 800080c:	08001155 	.word	0x08001155
 8000810:	08001181 	.word	0x08001181

08000814 <_cleanup_r>:
 8000814:	b510      	push	{r4, lr}
 8000816:	4902      	ldr	r1, [pc, #8]	; (8000820 <_cleanup_r+0xc>)
 8000818:	f000 f8ba 	bl	8000990 <_fwalk_reent>
 800081c:	bd10      	pop	{r4, pc}
 800081e:	46c0      	nop			; (mov r8, r8)
 8000820:	0800148d 	.word	0x0800148d

08000824 <__sfmoreglue>:
 8000824:	b570      	push	{r4, r5, r6, lr}
 8000826:	2568      	movs	r5, #104	; 0x68
 8000828:	1e4a      	subs	r2, r1, #1
 800082a:	4355      	muls	r5, r2
 800082c:	000e      	movs	r6, r1
 800082e:	0029      	movs	r1, r5
 8000830:	3174      	adds	r1, #116	; 0x74
 8000832:	f000 f8f3 	bl	8000a1c <_malloc_r>
 8000836:	1e04      	subs	r4, r0, #0
 8000838:	d008      	beq.n	800084c <__sfmoreglue+0x28>
 800083a:	2100      	movs	r1, #0
 800083c:	002a      	movs	r2, r5
 800083e:	6001      	str	r1, [r0, #0]
 8000840:	6046      	str	r6, [r0, #4]
 8000842:	300c      	adds	r0, #12
 8000844:	60a0      	str	r0, [r4, #8]
 8000846:	3268      	adds	r2, #104	; 0x68
 8000848:	f7ff ff9e 	bl	8000788 <memset>
 800084c:	0020      	movs	r0, r4
 800084e:	bd70      	pop	{r4, r5, r6, pc}

08000850 <__sfp_lock_acquire>:
 8000850:	b510      	push	{r4, lr}
 8000852:	4802      	ldr	r0, [pc, #8]	; (800085c <__sfp_lock_acquire+0xc>)
 8000854:	f000 f8bd 	bl	80009d2 <__retarget_lock_acquire_recursive>
 8000858:	bd10      	pop	{r4, pc}
 800085a:	46c0      	nop			; (mov r8, r8)
 800085c:	20000091 	.word	0x20000091

08000860 <__sfp_lock_release>:
 8000860:	b510      	push	{r4, lr}
 8000862:	4802      	ldr	r0, [pc, #8]	; (800086c <__sfp_lock_release+0xc>)
 8000864:	f000 f8b6 	bl	80009d4 <__retarget_lock_release_recursive>
 8000868:	bd10      	pop	{r4, pc}
 800086a:	46c0      	nop			; (mov r8, r8)
 800086c:	20000091 	.word	0x20000091

08000870 <__sinit_lock_acquire>:
 8000870:	b510      	push	{r4, lr}
 8000872:	4802      	ldr	r0, [pc, #8]	; (800087c <__sinit_lock_acquire+0xc>)
 8000874:	f000 f8ad 	bl	80009d2 <__retarget_lock_acquire_recursive>
 8000878:	bd10      	pop	{r4, pc}
 800087a:	46c0      	nop			; (mov r8, r8)
 800087c:	20000092 	.word	0x20000092

08000880 <__sinit_lock_release>:
 8000880:	b510      	push	{r4, lr}
 8000882:	4802      	ldr	r0, [pc, #8]	; (800088c <__sinit_lock_release+0xc>)
 8000884:	f000 f8a6 	bl	80009d4 <__retarget_lock_release_recursive>
 8000888:	bd10      	pop	{r4, pc}
 800088a:	46c0      	nop			; (mov r8, r8)
 800088c:	20000092 	.word	0x20000092

08000890 <__sinit>:
 8000890:	b513      	push	{r0, r1, r4, lr}
 8000892:	0004      	movs	r4, r0
 8000894:	f7ff ffec 	bl	8000870 <__sinit_lock_acquire>
 8000898:	69a3      	ldr	r3, [r4, #24]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d002      	beq.n	80008a4 <__sinit+0x14>
 800089e:	f7ff ffef 	bl	8000880 <__sinit_lock_release>
 80008a2:	bd13      	pop	{r0, r1, r4, pc}
 80008a4:	64a3      	str	r3, [r4, #72]	; 0x48
 80008a6:	64e3      	str	r3, [r4, #76]	; 0x4c
 80008a8:	6523      	str	r3, [r4, #80]	; 0x50
 80008aa:	4b13      	ldr	r3, [pc, #76]	; (80008f8 <__sinit+0x68>)
 80008ac:	4a13      	ldr	r2, [pc, #76]	; (80008fc <__sinit+0x6c>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	62a2      	str	r2, [r4, #40]	; 0x28
 80008b2:	9301      	str	r3, [sp, #4]
 80008b4:	42a3      	cmp	r3, r4
 80008b6:	d101      	bne.n	80008bc <__sinit+0x2c>
 80008b8:	2301      	movs	r3, #1
 80008ba:	61a3      	str	r3, [r4, #24]
 80008bc:	0020      	movs	r0, r4
 80008be:	f000 f81f 	bl	8000900 <__sfp>
 80008c2:	6060      	str	r0, [r4, #4]
 80008c4:	0020      	movs	r0, r4
 80008c6:	f000 f81b 	bl	8000900 <__sfp>
 80008ca:	60a0      	str	r0, [r4, #8]
 80008cc:	0020      	movs	r0, r4
 80008ce:	f000 f817 	bl	8000900 <__sfp>
 80008d2:	2200      	movs	r2, #0
 80008d4:	2104      	movs	r1, #4
 80008d6:	60e0      	str	r0, [r4, #12]
 80008d8:	6860      	ldr	r0, [r4, #4]
 80008da:	f7ff ff77 	bl	80007cc <std>
 80008de:	2201      	movs	r2, #1
 80008e0:	2109      	movs	r1, #9
 80008e2:	68a0      	ldr	r0, [r4, #8]
 80008e4:	f7ff ff72 	bl	80007cc <std>
 80008e8:	2202      	movs	r2, #2
 80008ea:	2112      	movs	r1, #18
 80008ec:	68e0      	ldr	r0, [r4, #12]
 80008ee:	f7ff ff6d 	bl	80007cc <std>
 80008f2:	2301      	movs	r3, #1
 80008f4:	61a3      	str	r3, [r4, #24]
 80008f6:	e7d2      	b.n	800089e <__sinit+0xe>
 80008f8:	08001774 	.word	0x08001774
 80008fc:	08000815 	.word	0x08000815

08000900 <__sfp>:
 8000900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000902:	0007      	movs	r7, r0
 8000904:	f7ff ffa4 	bl	8000850 <__sfp_lock_acquire>
 8000908:	4b1f      	ldr	r3, [pc, #124]	; (8000988 <__sfp+0x88>)
 800090a:	681e      	ldr	r6, [r3, #0]
 800090c:	69b3      	ldr	r3, [r6, #24]
 800090e:	2b00      	cmp	r3, #0
 8000910:	d102      	bne.n	8000918 <__sfp+0x18>
 8000912:	0030      	movs	r0, r6
 8000914:	f7ff ffbc 	bl	8000890 <__sinit>
 8000918:	3648      	adds	r6, #72	; 0x48
 800091a:	68b4      	ldr	r4, [r6, #8]
 800091c:	6873      	ldr	r3, [r6, #4]
 800091e:	3b01      	subs	r3, #1
 8000920:	d504      	bpl.n	800092c <__sfp+0x2c>
 8000922:	6833      	ldr	r3, [r6, #0]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d022      	beq.n	800096e <__sfp+0x6e>
 8000928:	6836      	ldr	r6, [r6, #0]
 800092a:	e7f6      	b.n	800091a <__sfp+0x1a>
 800092c:	220c      	movs	r2, #12
 800092e:	5ea5      	ldrsh	r5, [r4, r2]
 8000930:	2d00      	cmp	r5, #0
 8000932:	d11a      	bne.n	800096a <__sfp+0x6a>
 8000934:	0020      	movs	r0, r4
 8000936:	4b15      	ldr	r3, [pc, #84]	; (800098c <__sfp+0x8c>)
 8000938:	3058      	adds	r0, #88	; 0x58
 800093a:	60e3      	str	r3, [r4, #12]
 800093c:	6665      	str	r5, [r4, #100]	; 0x64
 800093e:	f000 f847 	bl	80009d0 <__retarget_lock_init_recursive>
 8000942:	f7ff ff8d 	bl	8000860 <__sfp_lock_release>
 8000946:	0020      	movs	r0, r4
 8000948:	2208      	movs	r2, #8
 800094a:	0029      	movs	r1, r5
 800094c:	6025      	str	r5, [r4, #0]
 800094e:	60a5      	str	r5, [r4, #8]
 8000950:	6065      	str	r5, [r4, #4]
 8000952:	6125      	str	r5, [r4, #16]
 8000954:	6165      	str	r5, [r4, #20]
 8000956:	61a5      	str	r5, [r4, #24]
 8000958:	305c      	adds	r0, #92	; 0x5c
 800095a:	f7ff ff15 	bl	8000788 <memset>
 800095e:	6365      	str	r5, [r4, #52]	; 0x34
 8000960:	63a5      	str	r5, [r4, #56]	; 0x38
 8000962:	64a5      	str	r5, [r4, #72]	; 0x48
 8000964:	64e5      	str	r5, [r4, #76]	; 0x4c
 8000966:	0020      	movs	r0, r4
 8000968:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800096a:	3468      	adds	r4, #104	; 0x68
 800096c:	e7d7      	b.n	800091e <__sfp+0x1e>
 800096e:	2104      	movs	r1, #4
 8000970:	0038      	movs	r0, r7
 8000972:	f7ff ff57 	bl	8000824 <__sfmoreglue>
 8000976:	1e04      	subs	r4, r0, #0
 8000978:	6030      	str	r0, [r6, #0]
 800097a:	d1d5      	bne.n	8000928 <__sfp+0x28>
 800097c:	f7ff ff70 	bl	8000860 <__sfp_lock_release>
 8000980:	230c      	movs	r3, #12
 8000982:	603b      	str	r3, [r7, #0]
 8000984:	e7ef      	b.n	8000966 <__sfp+0x66>
 8000986:	46c0      	nop			; (mov r8, r8)
 8000988:	08001774 	.word	0x08001774
 800098c:	ffff0001 	.word	0xffff0001

08000990 <_fwalk_reent>:
 8000990:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000992:	0004      	movs	r4, r0
 8000994:	0006      	movs	r6, r0
 8000996:	2700      	movs	r7, #0
 8000998:	9101      	str	r1, [sp, #4]
 800099a:	3448      	adds	r4, #72	; 0x48
 800099c:	6863      	ldr	r3, [r4, #4]
 800099e:	68a5      	ldr	r5, [r4, #8]
 80009a0:	9300      	str	r3, [sp, #0]
 80009a2:	9b00      	ldr	r3, [sp, #0]
 80009a4:	3b01      	subs	r3, #1
 80009a6:	9300      	str	r3, [sp, #0]
 80009a8:	d504      	bpl.n	80009b4 <_fwalk_reent+0x24>
 80009aa:	6824      	ldr	r4, [r4, #0]
 80009ac:	2c00      	cmp	r4, #0
 80009ae:	d1f5      	bne.n	800099c <_fwalk_reent+0xc>
 80009b0:	0038      	movs	r0, r7
 80009b2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80009b4:	89ab      	ldrh	r3, [r5, #12]
 80009b6:	2b01      	cmp	r3, #1
 80009b8:	d908      	bls.n	80009cc <_fwalk_reent+0x3c>
 80009ba:	220e      	movs	r2, #14
 80009bc:	5eab      	ldrsh	r3, [r5, r2]
 80009be:	3301      	adds	r3, #1
 80009c0:	d004      	beq.n	80009cc <_fwalk_reent+0x3c>
 80009c2:	0029      	movs	r1, r5
 80009c4:	0030      	movs	r0, r6
 80009c6:	9b01      	ldr	r3, [sp, #4]
 80009c8:	4798      	blx	r3
 80009ca:	4307      	orrs	r7, r0
 80009cc:	3568      	adds	r5, #104	; 0x68
 80009ce:	e7e8      	b.n	80009a2 <_fwalk_reent+0x12>

080009d0 <__retarget_lock_init_recursive>:
 80009d0:	4770      	bx	lr

080009d2 <__retarget_lock_acquire_recursive>:
 80009d2:	4770      	bx	lr

080009d4 <__retarget_lock_release_recursive>:
 80009d4:	4770      	bx	lr
	...

080009d8 <sbrk_aligned>:
 80009d8:	b570      	push	{r4, r5, r6, lr}
 80009da:	4e0f      	ldr	r6, [pc, #60]	; (8000a18 <sbrk_aligned+0x40>)
 80009dc:	000d      	movs	r5, r1
 80009de:	6831      	ldr	r1, [r6, #0]
 80009e0:	0004      	movs	r4, r0
 80009e2:	2900      	cmp	r1, #0
 80009e4:	d102      	bne.n	80009ec <sbrk_aligned+0x14>
 80009e6:	f000 fb73 	bl	80010d0 <_sbrk_r>
 80009ea:	6030      	str	r0, [r6, #0]
 80009ec:	0029      	movs	r1, r5
 80009ee:	0020      	movs	r0, r4
 80009f0:	f000 fb6e 	bl	80010d0 <_sbrk_r>
 80009f4:	1c43      	adds	r3, r0, #1
 80009f6:	d00a      	beq.n	8000a0e <sbrk_aligned+0x36>
 80009f8:	2303      	movs	r3, #3
 80009fa:	1cc5      	adds	r5, r0, #3
 80009fc:	439d      	bics	r5, r3
 80009fe:	42a8      	cmp	r0, r5
 8000a00:	d007      	beq.n	8000a12 <sbrk_aligned+0x3a>
 8000a02:	1a29      	subs	r1, r5, r0
 8000a04:	0020      	movs	r0, r4
 8000a06:	f000 fb63 	bl	80010d0 <_sbrk_r>
 8000a0a:	1c43      	adds	r3, r0, #1
 8000a0c:	d101      	bne.n	8000a12 <sbrk_aligned+0x3a>
 8000a0e:	2501      	movs	r5, #1
 8000a10:	426d      	negs	r5, r5
 8000a12:	0028      	movs	r0, r5
 8000a14:	bd70      	pop	{r4, r5, r6, pc}
 8000a16:	46c0      	nop			; (mov r8, r8)
 8000a18:	20000098 	.word	0x20000098

08000a1c <_malloc_r>:
 8000a1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000a1e:	2203      	movs	r2, #3
 8000a20:	1ccb      	adds	r3, r1, #3
 8000a22:	4393      	bics	r3, r2
 8000a24:	3308      	adds	r3, #8
 8000a26:	0006      	movs	r6, r0
 8000a28:	001f      	movs	r7, r3
 8000a2a:	2b0c      	cmp	r3, #12
 8000a2c:	d232      	bcs.n	8000a94 <_malloc_r+0x78>
 8000a2e:	270c      	movs	r7, #12
 8000a30:	42b9      	cmp	r1, r7
 8000a32:	d831      	bhi.n	8000a98 <_malloc_r+0x7c>
 8000a34:	0030      	movs	r0, r6
 8000a36:	f000 fdf5 	bl	8001624 <__malloc_lock>
 8000a3a:	4d32      	ldr	r5, [pc, #200]	; (8000b04 <_malloc_r+0xe8>)
 8000a3c:	682b      	ldr	r3, [r5, #0]
 8000a3e:	001c      	movs	r4, r3
 8000a40:	2c00      	cmp	r4, #0
 8000a42:	d12e      	bne.n	8000aa2 <_malloc_r+0x86>
 8000a44:	0039      	movs	r1, r7
 8000a46:	0030      	movs	r0, r6
 8000a48:	f7ff ffc6 	bl	80009d8 <sbrk_aligned>
 8000a4c:	0004      	movs	r4, r0
 8000a4e:	1c43      	adds	r3, r0, #1
 8000a50:	d11e      	bne.n	8000a90 <_malloc_r+0x74>
 8000a52:	682c      	ldr	r4, [r5, #0]
 8000a54:	0025      	movs	r5, r4
 8000a56:	2d00      	cmp	r5, #0
 8000a58:	d14a      	bne.n	8000af0 <_malloc_r+0xd4>
 8000a5a:	6823      	ldr	r3, [r4, #0]
 8000a5c:	0029      	movs	r1, r5
 8000a5e:	18e3      	adds	r3, r4, r3
 8000a60:	0030      	movs	r0, r6
 8000a62:	9301      	str	r3, [sp, #4]
 8000a64:	f000 fb34 	bl	80010d0 <_sbrk_r>
 8000a68:	9b01      	ldr	r3, [sp, #4]
 8000a6a:	4283      	cmp	r3, r0
 8000a6c:	d143      	bne.n	8000af6 <_malloc_r+0xda>
 8000a6e:	6823      	ldr	r3, [r4, #0]
 8000a70:	3703      	adds	r7, #3
 8000a72:	1aff      	subs	r7, r7, r3
 8000a74:	2303      	movs	r3, #3
 8000a76:	439f      	bics	r7, r3
 8000a78:	3708      	adds	r7, #8
 8000a7a:	2f0c      	cmp	r7, #12
 8000a7c:	d200      	bcs.n	8000a80 <_malloc_r+0x64>
 8000a7e:	270c      	movs	r7, #12
 8000a80:	0039      	movs	r1, r7
 8000a82:	0030      	movs	r0, r6
 8000a84:	f7ff ffa8 	bl	80009d8 <sbrk_aligned>
 8000a88:	1c43      	adds	r3, r0, #1
 8000a8a:	d034      	beq.n	8000af6 <_malloc_r+0xda>
 8000a8c:	6823      	ldr	r3, [r4, #0]
 8000a8e:	19df      	adds	r7, r3, r7
 8000a90:	6027      	str	r7, [r4, #0]
 8000a92:	e013      	b.n	8000abc <_malloc_r+0xa0>
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	dacb      	bge.n	8000a30 <_malloc_r+0x14>
 8000a98:	230c      	movs	r3, #12
 8000a9a:	2500      	movs	r5, #0
 8000a9c:	6033      	str	r3, [r6, #0]
 8000a9e:	0028      	movs	r0, r5
 8000aa0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8000aa2:	6822      	ldr	r2, [r4, #0]
 8000aa4:	1bd1      	subs	r1, r2, r7
 8000aa6:	d420      	bmi.n	8000aea <_malloc_r+0xce>
 8000aa8:	290b      	cmp	r1, #11
 8000aaa:	d917      	bls.n	8000adc <_malloc_r+0xc0>
 8000aac:	19e2      	adds	r2, r4, r7
 8000aae:	6027      	str	r7, [r4, #0]
 8000ab0:	42a3      	cmp	r3, r4
 8000ab2:	d111      	bne.n	8000ad8 <_malloc_r+0xbc>
 8000ab4:	602a      	str	r2, [r5, #0]
 8000ab6:	6863      	ldr	r3, [r4, #4]
 8000ab8:	6011      	str	r1, [r2, #0]
 8000aba:	6053      	str	r3, [r2, #4]
 8000abc:	0030      	movs	r0, r6
 8000abe:	0025      	movs	r5, r4
 8000ac0:	f000 fdb8 	bl	8001634 <__malloc_unlock>
 8000ac4:	2207      	movs	r2, #7
 8000ac6:	350b      	adds	r5, #11
 8000ac8:	1d23      	adds	r3, r4, #4
 8000aca:	4395      	bics	r5, r2
 8000acc:	1aea      	subs	r2, r5, r3
 8000ace:	429d      	cmp	r5, r3
 8000ad0:	d0e5      	beq.n	8000a9e <_malloc_r+0x82>
 8000ad2:	1b5b      	subs	r3, r3, r5
 8000ad4:	50a3      	str	r3, [r4, r2]
 8000ad6:	e7e2      	b.n	8000a9e <_malloc_r+0x82>
 8000ad8:	605a      	str	r2, [r3, #4]
 8000ada:	e7ec      	b.n	8000ab6 <_malloc_r+0x9a>
 8000adc:	6862      	ldr	r2, [r4, #4]
 8000ade:	42a3      	cmp	r3, r4
 8000ae0:	d101      	bne.n	8000ae6 <_malloc_r+0xca>
 8000ae2:	602a      	str	r2, [r5, #0]
 8000ae4:	e7ea      	b.n	8000abc <_malloc_r+0xa0>
 8000ae6:	605a      	str	r2, [r3, #4]
 8000ae8:	e7e8      	b.n	8000abc <_malloc_r+0xa0>
 8000aea:	0023      	movs	r3, r4
 8000aec:	6864      	ldr	r4, [r4, #4]
 8000aee:	e7a7      	b.n	8000a40 <_malloc_r+0x24>
 8000af0:	002c      	movs	r4, r5
 8000af2:	686d      	ldr	r5, [r5, #4]
 8000af4:	e7af      	b.n	8000a56 <_malloc_r+0x3a>
 8000af6:	230c      	movs	r3, #12
 8000af8:	0030      	movs	r0, r6
 8000afa:	6033      	str	r3, [r6, #0]
 8000afc:	f000 fd9a 	bl	8001634 <__malloc_unlock>
 8000b00:	e7cd      	b.n	8000a9e <_malloc_r+0x82>
 8000b02:	46c0      	nop			; (mov r8, r8)
 8000b04:	20000094 	.word	0x20000094

08000b08 <__sfputc_r>:
 8000b08:	6893      	ldr	r3, [r2, #8]
 8000b0a:	b510      	push	{r4, lr}
 8000b0c:	3b01      	subs	r3, #1
 8000b0e:	6093      	str	r3, [r2, #8]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	da04      	bge.n	8000b1e <__sfputc_r+0x16>
 8000b14:	6994      	ldr	r4, [r2, #24]
 8000b16:	42a3      	cmp	r3, r4
 8000b18:	db07      	blt.n	8000b2a <__sfputc_r+0x22>
 8000b1a:	290a      	cmp	r1, #10
 8000b1c:	d005      	beq.n	8000b2a <__sfputc_r+0x22>
 8000b1e:	6813      	ldr	r3, [r2, #0]
 8000b20:	1c58      	adds	r0, r3, #1
 8000b22:	6010      	str	r0, [r2, #0]
 8000b24:	7019      	strb	r1, [r3, #0]
 8000b26:	0008      	movs	r0, r1
 8000b28:	bd10      	pop	{r4, pc}
 8000b2a:	f000 fb2f 	bl	800118c <__swbuf_r>
 8000b2e:	0001      	movs	r1, r0
 8000b30:	e7f9      	b.n	8000b26 <__sfputc_r+0x1e>

08000b32 <__sfputs_r>:
 8000b32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b34:	0006      	movs	r6, r0
 8000b36:	000f      	movs	r7, r1
 8000b38:	0014      	movs	r4, r2
 8000b3a:	18d5      	adds	r5, r2, r3
 8000b3c:	42ac      	cmp	r4, r5
 8000b3e:	d101      	bne.n	8000b44 <__sfputs_r+0x12>
 8000b40:	2000      	movs	r0, #0
 8000b42:	e007      	b.n	8000b54 <__sfputs_r+0x22>
 8000b44:	7821      	ldrb	r1, [r4, #0]
 8000b46:	003a      	movs	r2, r7
 8000b48:	0030      	movs	r0, r6
 8000b4a:	f7ff ffdd 	bl	8000b08 <__sfputc_r>
 8000b4e:	3401      	adds	r4, #1
 8000b50:	1c43      	adds	r3, r0, #1
 8000b52:	d1f3      	bne.n	8000b3c <__sfputs_r+0xa>
 8000b54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000b58 <_vfiprintf_r>:
 8000b58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b5a:	b0a1      	sub	sp, #132	; 0x84
 8000b5c:	0006      	movs	r6, r0
 8000b5e:	000c      	movs	r4, r1
 8000b60:	001f      	movs	r7, r3
 8000b62:	9203      	str	r2, [sp, #12]
 8000b64:	2800      	cmp	r0, #0
 8000b66:	d004      	beq.n	8000b72 <_vfiprintf_r+0x1a>
 8000b68:	6983      	ldr	r3, [r0, #24]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d101      	bne.n	8000b72 <_vfiprintf_r+0x1a>
 8000b6e:	f7ff fe8f 	bl	8000890 <__sinit>
 8000b72:	4b8e      	ldr	r3, [pc, #568]	; (8000dac <_vfiprintf_r+0x254>)
 8000b74:	429c      	cmp	r4, r3
 8000b76:	d11c      	bne.n	8000bb2 <_vfiprintf_r+0x5a>
 8000b78:	6874      	ldr	r4, [r6, #4]
 8000b7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000b7c:	07db      	lsls	r3, r3, #31
 8000b7e:	d405      	bmi.n	8000b8c <_vfiprintf_r+0x34>
 8000b80:	89a3      	ldrh	r3, [r4, #12]
 8000b82:	059b      	lsls	r3, r3, #22
 8000b84:	d402      	bmi.n	8000b8c <_vfiprintf_r+0x34>
 8000b86:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000b88:	f7ff ff23 	bl	80009d2 <__retarget_lock_acquire_recursive>
 8000b8c:	89a3      	ldrh	r3, [r4, #12]
 8000b8e:	071b      	lsls	r3, r3, #28
 8000b90:	d502      	bpl.n	8000b98 <_vfiprintf_r+0x40>
 8000b92:	6923      	ldr	r3, [r4, #16]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d11d      	bne.n	8000bd4 <_vfiprintf_r+0x7c>
 8000b98:	0021      	movs	r1, r4
 8000b9a:	0030      	movs	r0, r6
 8000b9c:	f000 fb60 	bl	8001260 <__swsetup_r>
 8000ba0:	2800      	cmp	r0, #0
 8000ba2:	d017      	beq.n	8000bd4 <_vfiprintf_r+0x7c>
 8000ba4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000ba6:	07db      	lsls	r3, r3, #31
 8000ba8:	d50d      	bpl.n	8000bc6 <_vfiprintf_r+0x6e>
 8000baa:	2001      	movs	r0, #1
 8000bac:	4240      	negs	r0, r0
 8000bae:	b021      	add	sp, #132	; 0x84
 8000bb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bb2:	4b7f      	ldr	r3, [pc, #508]	; (8000db0 <_vfiprintf_r+0x258>)
 8000bb4:	429c      	cmp	r4, r3
 8000bb6:	d101      	bne.n	8000bbc <_vfiprintf_r+0x64>
 8000bb8:	68b4      	ldr	r4, [r6, #8]
 8000bba:	e7de      	b.n	8000b7a <_vfiprintf_r+0x22>
 8000bbc:	4b7d      	ldr	r3, [pc, #500]	; (8000db4 <_vfiprintf_r+0x25c>)
 8000bbe:	429c      	cmp	r4, r3
 8000bc0:	d1db      	bne.n	8000b7a <_vfiprintf_r+0x22>
 8000bc2:	68f4      	ldr	r4, [r6, #12]
 8000bc4:	e7d9      	b.n	8000b7a <_vfiprintf_r+0x22>
 8000bc6:	89a3      	ldrh	r3, [r4, #12]
 8000bc8:	059b      	lsls	r3, r3, #22
 8000bca:	d4ee      	bmi.n	8000baa <_vfiprintf_r+0x52>
 8000bcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000bce:	f7ff ff01 	bl	80009d4 <__retarget_lock_release_recursive>
 8000bd2:	e7ea      	b.n	8000baa <_vfiprintf_r+0x52>
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	ad08      	add	r5, sp, #32
 8000bd8:	616b      	str	r3, [r5, #20]
 8000bda:	3320      	adds	r3, #32
 8000bdc:	766b      	strb	r3, [r5, #25]
 8000bde:	3310      	adds	r3, #16
 8000be0:	76ab      	strb	r3, [r5, #26]
 8000be2:	9707      	str	r7, [sp, #28]
 8000be4:	9f03      	ldr	r7, [sp, #12]
 8000be6:	783b      	ldrb	r3, [r7, #0]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <_vfiprintf_r+0x98>
 8000bec:	2b25      	cmp	r3, #37	; 0x25
 8000bee:	d14e      	bne.n	8000c8e <_vfiprintf_r+0x136>
 8000bf0:	9b03      	ldr	r3, [sp, #12]
 8000bf2:	1afb      	subs	r3, r7, r3
 8000bf4:	9305      	str	r3, [sp, #20]
 8000bf6:	9b03      	ldr	r3, [sp, #12]
 8000bf8:	429f      	cmp	r7, r3
 8000bfa:	d00d      	beq.n	8000c18 <_vfiprintf_r+0xc0>
 8000bfc:	9b05      	ldr	r3, [sp, #20]
 8000bfe:	0021      	movs	r1, r4
 8000c00:	0030      	movs	r0, r6
 8000c02:	9a03      	ldr	r2, [sp, #12]
 8000c04:	f7ff ff95 	bl	8000b32 <__sfputs_r>
 8000c08:	1c43      	adds	r3, r0, #1
 8000c0a:	d100      	bne.n	8000c0e <_vfiprintf_r+0xb6>
 8000c0c:	e0b5      	b.n	8000d7a <_vfiprintf_r+0x222>
 8000c0e:	696a      	ldr	r2, [r5, #20]
 8000c10:	9b05      	ldr	r3, [sp, #20]
 8000c12:	4694      	mov	ip, r2
 8000c14:	4463      	add	r3, ip
 8000c16:	616b      	str	r3, [r5, #20]
 8000c18:	783b      	ldrb	r3, [r7, #0]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d100      	bne.n	8000c20 <_vfiprintf_r+0xc8>
 8000c1e:	e0ac      	b.n	8000d7a <_vfiprintf_r+0x222>
 8000c20:	2201      	movs	r2, #1
 8000c22:	1c7b      	adds	r3, r7, #1
 8000c24:	9303      	str	r3, [sp, #12]
 8000c26:	2300      	movs	r3, #0
 8000c28:	4252      	negs	r2, r2
 8000c2a:	606a      	str	r2, [r5, #4]
 8000c2c:	a904      	add	r1, sp, #16
 8000c2e:	3254      	adds	r2, #84	; 0x54
 8000c30:	1852      	adds	r2, r2, r1
 8000c32:	602b      	str	r3, [r5, #0]
 8000c34:	60eb      	str	r3, [r5, #12]
 8000c36:	60ab      	str	r3, [r5, #8]
 8000c38:	7013      	strb	r3, [r2, #0]
 8000c3a:	65ab      	str	r3, [r5, #88]	; 0x58
 8000c3c:	9b03      	ldr	r3, [sp, #12]
 8000c3e:	2205      	movs	r2, #5
 8000c40:	7819      	ldrb	r1, [r3, #0]
 8000c42:	485d      	ldr	r0, [pc, #372]	; (8000db8 <_vfiprintf_r+0x260>)
 8000c44:	f000 fce2 	bl	800160c <memchr>
 8000c48:	9b03      	ldr	r3, [sp, #12]
 8000c4a:	1c5f      	adds	r7, r3, #1
 8000c4c:	2800      	cmp	r0, #0
 8000c4e:	d120      	bne.n	8000c92 <_vfiprintf_r+0x13a>
 8000c50:	682a      	ldr	r2, [r5, #0]
 8000c52:	06d3      	lsls	r3, r2, #27
 8000c54:	d504      	bpl.n	8000c60 <_vfiprintf_r+0x108>
 8000c56:	2353      	movs	r3, #83	; 0x53
 8000c58:	a904      	add	r1, sp, #16
 8000c5a:	185b      	adds	r3, r3, r1
 8000c5c:	2120      	movs	r1, #32
 8000c5e:	7019      	strb	r1, [r3, #0]
 8000c60:	0713      	lsls	r3, r2, #28
 8000c62:	d504      	bpl.n	8000c6e <_vfiprintf_r+0x116>
 8000c64:	2353      	movs	r3, #83	; 0x53
 8000c66:	a904      	add	r1, sp, #16
 8000c68:	185b      	adds	r3, r3, r1
 8000c6a:	212b      	movs	r1, #43	; 0x2b
 8000c6c:	7019      	strb	r1, [r3, #0]
 8000c6e:	9b03      	ldr	r3, [sp, #12]
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	2b2a      	cmp	r3, #42	; 0x2a
 8000c74:	d016      	beq.n	8000ca4 <_vfiprintf_r+0x14c>
 8000c76:	2100      	movs	r1, #0
 8000c78:	68eb      	ldr	r3, [r5, #12]
 8000c7a:	9f03      	ldr	r7, [sp, #12]
 8000c7c:	783a      	ldrb	r2, [r7, #0]
 8000c7e:	1c78      	adds	r0, r7, #1
 8000c80:	3a30      	subs	r2, #48	; 0x30
 8000c82:	4684      	mov	ip, r0
 8000c84:	2a09      	cmp	r2, #9
 8000c86:	d94f      	bls.n	8000d28 <_vfiprintf_r+0x1d0>
 8000c88:	2900      	cmp	r1, #0
 8000c8a:	d111      	bne.n	8000cb0 <_vfiprintf_r+0x158>
 8000c8c:	e017      	b.n	8000cbe <_vfiprintf_r+0x166>
 8000c8e:	3701      	adds	r7, #1
 8000c90:	e7a9      	b.n	8000be6 <_vfiprintf_r+0x8e>
 8000c92:	4b49      	ldr	r3, [pc, #292]	; (8000db8 <_vfiprintf_r+0x260>)
 8000c94:	682a      	ldr	r2, [r5, #0]
 8000c96:	1ac0      	subs	r0, r0, r3
 8000c98:	2301      	movs	r3, #1
 8000c9a:	4083      	lsls	r3, r0
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	602b      	str	r3, [r5, #0]
 8000ca0:	9703      	str	r7, [sp, #12]
 8000ca2:	e7cb      	b.n	8000c3c <_vfiprintf_r+0xe4>
 8000ca4:	9b07      	ldr	r3, [sp, #28]
 8000ca6:	1d19      	adds	r1, r3, #4
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	9107      	str	r1, [sp, #28]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	db01      	blt.n	8000cb4 <_vfiprintf_r+0x15c>
 8000cb0:	930b      	str	r3, [sp, #44]	; 0x2c
 8000cb2:	e004      	b.n	8000cbe <_vfiprintf_r+0x166>
 8000cb4:	425b      	negs	r3, r3
 8000cb6:	60eb      	str	r3, [r5, #12]
 8000cb8:	2302      	movs	r3, #2
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	602b      	str	r3, [r5, #0]
 8000cbe:	783b      	ldrb	r3, [r7, #0]
 8000cc0:	2b2e      	cmp	r3, #46	; 0x2e
 8000cc2:	d10a      	bne.n	8000cda <_vfiprintf_r+0x182>
 8000cc4:	787b      	ldrb	r3, [r7, #1]
 8000cc6:	2b2a      	cmp	r3, #42	; 0x2a
 8000cc8:	d137      	bne.n	8000d3a <_vfiprintf_r+0x1e2>
 8000cca:	9b07      	ldr	r3, [sp, #28]
 8000ccc:	3702      	adds	r7, #2
 8000cce:	1d1a      	adds	r2, r3, #4
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	9207      	str	r2, [sp, #28]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	db2d      	blt.n	8000d34 <_vfiprintf_r+0x1dc>
 8000cd8:	9309      	str	r3, [sp, #36]	; 0x24
 8000cda:	2203      	movs	r2, #3
 8000cdc:	7839      	ldrb	r1, [r7, #0]
 8000cde:	4837      	ldr	r0, [pc, #220]	; (8000dbc <_vfiprintf_r+0x264>)
 8000ce0:	f000 fc94 	bl	800160c <memchr>
 8000ce4:	2800      	cmp	r0, #0
 8000ce6:	d007      	beq.n	8000cf8 <_vfiprintf_r+0x1a0>
 8000ce8:	4b34      	ldr	r3, [pc, #208]	; (8000dbc <_vfiprintf_r+0x264>)
 8000cea:	682a      	ldr	r2, [r5, #0]
 8000cec:	1ac0      	subs	r0, r0, r3
 8000cee:	2340      	movs	r3, #64	; 0x40
 8000cf0:	4083      	lsls	r3, r0
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	3701      	adds	r7, #1
 8000cf6:	602b      	str	r3, [r5, #0]
 8000cf8:	7839      	ldrb	r1, [r7, #0]
 8000cfa:	1c7b      	adds	r3, r7, #1
 8000cfc:	2206      	movs	r2, #6
 8000cfe:	4830      	ldr	r0, [pc, #192]	; (8000dc0 <_vfiprintf_r+0x268>)
 8000d00:	9303      	str	r3, [sp, #12]
 8000d02:	7629      	strb	r1, [r5, #24]
 8000d04:	f000 fc82 	bl	800160c <memchr>
 8000d08:	2800      	cmp	r0, #0
 8000d0a:	d045      	beq.n	8000d98 <_vfiprintf_r+0x240>
 8000d0c:	4b2d      	ldr	r3, [pc, #180]	; (8000dc4 <_vfiprintf_r+0x26c>)
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d127      	bne.n	8000d62 <_vfiprintf_r+0x20a>
 8000d12:	2207      	movs	r2, #7
 8000d14:	9b07      	ldr	r3, [sp, #28]
 8000d16:	3307      	adds	r3, #7
 8000d18:	4393      	bics	r3, r2
 8000d1a:	3308      	adds	r3, #8
 8000d1c:	9307      	str	r3, [sp, #28]
 8000d1e:	696b      	ldr	r3, [r5, #20]
 8000d20:	9a04      	ldr	r2, [sp, #16]
 8000d22:	189b      	adds	r3, r3, r2
 8000d24:	616b      	str	r3, [r5, #20]
 8000d26:	e75d      	b.n	8000be4 <_vfiprintf_r+0x8c>
 8000d28:	210a      	movs	r1, #10
 8000d2a:	434b      	muls	r3, r1
 8000d2c:	4667      	mov	r7, ip
 8000d2e:	189b      	adds	r3, r3, r2
 8000d30:	3909      	subs	r1, #9
 8000d32:	e7a3      	b.n	8000c7c <_vfiprintf_r+0x124>
 8000d34:	2301      	movs	r3, #1
 8000d36:	425b      	negs	r3, r3
 8000d38:	e7ce      	b.n	8000cd8 <_vfiprintf_r+0x180>
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	001a      	movs	r2, r3
 8000d3e:	3701      	adds	r7, #1
 8000d40:	606b      	str	r3, [r5, #4]
 8000d42:	7839      	ldrb	r1, [r7, #0]
 8000d44:	1c78      	adds	r0, r7, #1
 8000d46:	3930      	subs	r1, #48	; 0x30
 8000d48:	4684      	mov	ip, r0
 8000d4a:	2909      	cmp	r1, #9
 8000d4c:	d903      	bls.n	8000d56 <_vfiprintf_r+0x1fe>
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d0c3      	beq.n	8000cda <_vfiprintf_r+0x182>
 8000d52:	9209      	str	r2, [sp, #36]	; 0x24
 8000d54:	e7c1      	b.n	8000cda <_vfiprintf_r+0x182>
 8000d56:	230a      	movs	r3, #10
 8000d58:	435a      	muls	r2, r3
 8000d5a:	4667      	mov	r7, ip
 8000d5c:	1852      	adds	r2, r2, r1
 8000d5e:	3b09      	subs	r3, #9
 8000d60:	e7ef      	b.n	8000d42 <_vfiprintf_r+0x1ea>
 8000d62:	ab07      	add	r3, sp, #28
 8000d64:	9300      	str	r3, [sp, #0]
 8000d66:	0022      	movs	r2, r4
 8000d68:	0029      	movs	r1, r5
 8000d6a:	0030      	movs	r0, r6
 8000d6c:	4b16      	ldr	r3, [pc, #88]	; (8000dc8 <_vfiprintf_r+0x270>)
 8000d6e:	e000      	b.n	8000d72 <_vfiprintf_r+0x21a>
 8000d70:	bf00      	nop
 8000d72:	9004      	str	r0, [sp, #16]
 8000d74:	9b04      	ldr	r3, [sp, #16]
 8000d76:	3301      	adds	r3, #1
 8000d78:	d1d1      	bne.n	8000d1e <_vfiprintf_r+0x1c6>
 8000d7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000d7c:	07db      	lsls	r3, r3, #31
 8000d7e:	d405      	bmi.n	8000d8c <_vfiprintf_r+0x234>
 8000d80:	89a3      	ldrh	r3, [r4, #12]
 8000d82:	059b      	lsls	r3, r3, #22
 8000d84:	d402      	bmi.n	8000d8c <_vfiprintf_r+0x234>
 8000d86:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000d88:	f7ff fe24 	bl	80009d4 <__retarget_lock_release_recursive>
 8000d8c:	89a3      	ldrh	r3, [r4, #12]
 8000d8e:	065b      	lsls	r3, r3, #25
 8000d90:	d500      	bpl.n	8000d94 <_vfiprintf_r+0x23c>
 8000d92:	e70a      	b.n	8000baa <_vfiprintf_r+0x52>
 8000d94:	980d      	ldr	r0, [sp, #52]	; 0x34
 8000d96:	e70a      	b.n	8000bae <_vfiprintf_r+0x56>
 8000d98:	ab07      	add	r3, sp, #28
 8000d9a:	9300      	str	r3, [sp, #0]
 8000d9c:	0022      	movs	r2, r4
 8000d9e:	0029      	movs	r1, r5
 8000da0:	0030      	movs	r0, r6
 8000da2:	4b09      	ldr	r3, [pc, #36]	; (8000dc8 <_vfiprintf_r+0x270>)
 8000da4:	f000 f882 	bl	8000eac <_printf_i>
 8000da8:	e7e3      	b.n	8000d72 <_vfiprintf_r+0x21a>
 8000daa:	46c0      	nop			; (mov r8, r8)
 8000dac:	08001798 	.word	0x08001798
 8000db0:	080017b8 	.word	0x080017b8
 8000db4:	08001778 	.word	0x08001778
 8000db8:	080017d8 	.word	0x080017d8
 8000dbc:	080017de 	.word	0x080017de
 8000dc0:	080017e2 	.word	0x080017e2
 8000dc4:	00000000 	.word	0x00000000
 8000dc8:	08000b33 	.word	0x08000b33

08000dcc <_printf_common>:
 8000dcc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000dce:	0015      	movs	r5, r2
 8000dd0:	9301      	str	r3, [sp, #4]
 8000dd2:	688a      	ldr	r2, [r1, #8]
 8000dd4:	690b      	ldr	r3, [r1, #16]
 8000dd6:	000c      	movs	r4, r1
 8000dd8:	9000      	str	r0, [sp, #0]
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	da00      	bge.n	8000de0 <_printf_common+0x14>
 8000dde:	0013      	movs	r3, r2
 8000de0:	0022      	movs	r2, r4
 8000de2:	602b      	str	r3, [r5, #0]
 8000de4:	3243      	adds	r2, #67	; 0x43
 8000de6:	7812      	ldrb	r2, [r2, #0]
 8000de8:	2a00      	cmp	r2, #0
 8000dea:	d001      	beq.n	8000df0 <_printf_common+0x24>
 8000dec:	3301      	adds	r3, #1
 8000dee:	602b      	str	r3, [r5, #0]
 8000df0:	6823      	ldr	r3, [r4, #0]
 8000df2:	069b      	lsls	r3, r3, #26
 8000df4:	d502      	bpl.n	8000dfc <_printf_common+0x30>
 8000df6:	682b      	ldr	r3, [r5, #0]
 8000df8:	3302      	adds	r3, #2
 8000dfa:	602b      	str	r3, [r5, #0]
 8000dfc:	6822      	ldr	r2, [r4, #0]
 8000dfe:	2306      	movs	r3, #6
 8000e00:	0017      	movs	r7, r2
 8000e02:	401f      	ands	r7, r3
 8000e04:	421a      	tst	r2, r3
 8000e06:	d027      	beq.n	8000e58 <_printf_common+0x8c>
 8000e08:	0023      	movs	r3, r4
 8000e0a:	3343      	adds	r3, #67	; 0x43
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	1e5a      	subs	r2, r3, #1
 8000e10:	4193      	sbcs	r3, r2
 8000e12:	6822      	ldr	r2, [r4, #0]
 8000e14:	0692      	lsls	r2, r2, #26
 8000e16:	d430      	bmi.n	8000e7a <_printf_common+0xae>
 8000e18:	0022      	movs	r2, r4
 8000e1a:	9901      	ldr	r1, [sp, #4]
 8000e1c:	9800      	ldr	r0, [sp, #0]
 8000e1e:	9e08      	ldr	r6, [sp, #32]
 8000e20:	3243      	adds	r2, #67	; 0x43
 8000e22:	47b0      	blx	r6
 8000e24:	1c43      	adds	r3, r0, #1
 8000e26:	d025      	beq.n	8000e74 <_printf_common+0xa8>
 8000e28:	2306      	movs	r3, #6
 8000e2a:	6820      	ldr	r0, [r4, #0]
 8000e2c:	682a      	ldr	r2, [r5, #0]
 8000e2e:	68e1      	ldr	r1, [r4, #12]
 8000e30:	2500      	movs	r5, #0
 8000e32:	4003      	ands	r3, r0
 8000e34:	2b04      	cmp	r3, #4
 8000e36:	d103      	bne.n	8000e40 <_printf_common+0x74>
 8000e38:	1a8d      	subs	r5, r1, r2
 8000e3a:	43eb      	mvns	r3, r5
 8000e3c:	17db      	asrs	r3, r3, #31
 8000e3e:	401d      	ands	r5, r3
 8000e40:	68a3      	ldr	r3, [r4, #8]
 8000e42:	6922      	ldr	r2, [r4, #16]
 8000e44:	4293      	cmp	r3, r2
 8000e46:	dd01      	ble.n	8000e4c <_printf_common+0x80>
 8000e48:	1a9b      	subs	r3, r3, r2
 8000e4a:	18ed      	adds	r5, r5, r3
 8000e4c:	2700      	movs	r7, #0
 8000e4e:	42bd      	cmp	r5, r7
 8000e50:	d120      	bne.n	8000e94 <_printf_common+0xc8>
 8000e52:	2000      	movs	r0, #0
 8000e54:	e010      	b.n	8000e78 <_printf_common+0xac>
 8000e56:	3701      	adds	r7, #1
 8000e58:	68e3      	ldr	r3, [r4, #12]
 8000e5a:	682a      	ldr	r2, [r5, #0]
 8000e5c:	1a9b      	subs	r3, r3, r2
 8000e5e:	42bb      	cmp	r3, r7
 8000e60:	ddd2      	ble.n	8000e08 <_printf_common+0x3c>
 8000e62:	0022      	movs	r2, r4
 8000e64:	2301      	movs	r3, #1
 8000e66:	9901      	ldr	r1, [sp, #4]
 8000e68:	9800      	ldr	r0, [sp, #0]
 8000e6a:	9e08      	ldr	r6, [sp, #32]
 8000e6c:	3219      	adds	r2, #25
 8000e6e:	47b0      	blx	r6
 8000e70:	1c43      	adds	r3, r0, #1
 8000e72:	d1f0      	bne.n	8000e56 <_printf_common+0x8a>
 8000e74:	2001      	movs	r0, #1
 8000e76:	4240      	negs	r0, r0
 8000e78:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8000e7a:	2030      	movs	r0, #48	; 0x30
 8000e7c:	18e1      	adds	r1, r4, r3
 8000e7e:	3143      	adds	r1, #67	; 0x43
 8000e80:	7008      	strb	r0, [r1, #0]
 8000e82:	0021      	movs	r1, r4
 8000e84:	1c5a      	adds	r2, r3, #1
 8000e86:	3145      	adds	r1, #69	; 0x45
 8000e88:	7809      	ldrb	r1, [r1, #0]
 8000e8a:	18a2      	adds	r2, r4, r2
 8000e8c:	3243      	adds	r2, #67	; 0x43
 8000e8e:	3302      	adds	r3, #2
 8000e90:	7011      	strb	r1, [r2, #0]
 8000e92:	e7c1      	b.n	8000e18 <_printf_common+0x4c>
 8000e94:	0022      	movs	r2, r4
 8000e96:	2301      	movs	r3, #1
 8000e98:	9901      	ldr	r1, [sp, #4]
 8000e9a:	9800      	ldr	r0, [sp, #0]
 8000e9c:	9e08      	ldr	r6, [sp, #32]
 8000e9e:	321a      	adds	r2, #26
 8000ea0:	47b0      	blx	r6
 8000ea2:	1c43      	adds	r3, r0, #1
 8000ea4:	d0e6      	beq.n	8000e74 <_printf_common+0xa8>
 8000ea6:	3701      	adds	r7, #1
 8000ea8:	e7d1      	b.n	8000e4e <_printf_common+0x82>
	...

08000eac <_printf_i>:
 8000eac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000eae:	b08b      	sub	sp, #44	; 0x2c
 8000eb0:	9206      	str	r2, [sp, #24]
 8000eb2:	000a      	movs	r2, r1
 8000eb4:	3243      	adds	r2, #67	; 0x43
 8000eb6:	9307      	str	r3, [sp, #28]
 8000eb8:	9005      	str	r0, [sp, #20]
 8000eba:	9204      	str	r2, [sp, #16]
 8000ebc:	7e0a      	ldrb	r2, [r1, #24]
 8000ebe:	000c      	movs	r4, r1
 8000ec0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8000ec2:	2a78      	cmp	r2, #120	; 0x78
 8000ec4:	d807      	bhi.n	8000ed6 <_printf_i+0x2a>
 8000ec6:	2a62      	cmp	r2, #98	; 0x62
 8000ec8:	d809      	bhi.n	8000ede <_printf_i+0x32>
 8000eca:	2a00      	cmp	r2, #0
 8000ecc:	d100      	bne.n	8000ed0 <_printf_i+0x24>
 8000ece:	e0c1      	b.n	8001054 <_printf_i+0x1a8>
 8000ed0:	2a58      	cmp	r2, #88	; 0x58
 8000ed2:	d100      	bne.n	8000ed6 <_printf_i+0x2a>
 8000ed4:	e08c      	b.n	8000ff0 <_printf_i+0x144>
 8000ed6:	0026      	movs	r6, r4
 8000ed8:	3642      	adds	r6, #66	; 0x42
 8000eda:	7032      	strb	r2, [r6, #0]
 8000edc:	e022      	b.n	8000f24 <_printf_i+0x78>
 8000ede:	0010      	movs	r0, r2
 8000ee0:	3863      	subs	r0, #99	; 0x63
 8000ee2:	2815      	cmp	r0, #21
 8000ee4:	d8f7      	bhi.n	8000ed6 <_printf_i+0x2a>
 8000ee6:	f7ff f90f 	bl	8000108 <__gnu_thumb1_case_shi>
 8000eea:	0016      	.short	0x0016
 8000eec:	fff6001f 	.word	0xfff6001f
 8000ef0:	fff6fff6 	.word	0xfff6fff6
 8000ef4:	001ffff6 	.word	0x001ffff6
 8000ef8:	fff6fff6 	.word	0xfff6fff6
 8000efc:	fff6fff6 	.word	0xfff6fff6
 8000f00:	003600a8 	.word	0x003600a8
 8000f04:	fff6009a 	.word	0xfff6009a
 8000f08:	00b9fff6 	.word	0x00b9fff6
 8000f0c:	0036fff6 	.word	0x0036fff6
 8000f10:	fff6fff6 	.word	0xfff6fff6
 8000f14:	009e      	.short	0x009e
 8000f16:	0026      	movs	r6, r4
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	3642      	adds	r6, #66	; 0x42
 8000f1c:	1d11      	adds	r1, r2, #4
 8000f1e:	6019      	str	r1, [r3, #0]
 8000f20:	6813      	ldr	r3, [r2, #0]
 8000f22:	7033      	strb	r3, [r6, #0]
 8000f24:	2301      	movs	r3, #1
 8000f26:	e0a7      	b.n	8001078 <_printf_i+0x1cc>
 8000f28:	6808      	ldr	r0, [r1, #0]
 8000f2a:	6819      	ldr	r1, [r3, #0]
 8000f2c:	1d0a      	adds	r2, r1, #4
 8000f2e:	0605      	lsls	r5, r0, #24
 8000f30:	d50b      	bpl.n	8000f4a <_printf_i+0x9e>
 8000f32:	680d      	ldr	r5, [r1, #0]
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	2d00      	cmp	r5, #0
 8000f38:	da03      	bge.n	8000f42 <_printf_i+0x96>
 8000f3a:	232d      	movs	r3, #45	; 0x2d
 8000f3c:	9a04      	ldr	r2, [sp, #16]
 8000f3e:	426d      	negs	r5, r5
 8000f40:	7013      	strb	r3, [r2, #0]
 8000f42:	4b61      	ldr	r3, [pc, #388]	; (80010c8 <_printf_i+0x21c>)
 8000f44:	270a      	movs	r7, #10
 8000f46:	9303      	str	r3, [sp, #12]
 8000f48:	e01b      	b.n	8000f82 <_printf_i+0xd6>
 8000f4a:	680d      	ldr	r5, [r1, #0]
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	0641      	lsls	r1, r0, #25
 8000f50:	d5f1      	bpl.n	8000f36 <_printf_i+0x8a>
 8000f52:	b22d      	sxth	r5, r5
 8000f54:	e7ef      	b.n	8000f36 <_printf_i+0x8a>
 8000f56:	680d      	ldr	r5, [r1, #0]
 8000f58:	6819      	ldr	r1, [r3, #0]
 8000f5a:	1d08      	adds	r0, r1, #4
 8000f5c:	6018      	str	r0, [r3, #0]
 8000f5e:	062e      	lsls	r6, r5, #24
 8000f60:	d501      	bpl.n	8000f66 <_printf_i+0xba>
 8000f62:	680d      	ldr	r5, [r1, #0]
 8000f64:	e003      	b.n	8000f6e <_printf_i+0xc2>
 8000f66:	066d      	lsls	r5, r5, #25
 8000f68:	d5fb      	bpl.n	8000f62 <_printf_i+0xb6>
 8000f6a:	680d      	ldr	r5, [r1, #0]
 8000f6c:	b2ad      	uxth	r5, r5
 8000f6e:	4b56      	ldr	r3, [pc, #344]	; (80010c8 <_printf_i+0x21c>)
 8000f70:	2708      	movs	r7, #8
 8000f72:	9303      	str	r3, [sp, #12]
 8000f74:	2a6f      	cmp	r2, #111	; 0x6f
 8000f76:	d000      	beq.n	8000f7a <_printf_i+0xce>
 8000f78:	3702      	adds	r7, #2
 8000f7a:	0023      	movs	r3, r4
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	3343      	adds	r3, #67	; 0x43
 8000f80:	701a      	strb	r2, [r3, #0]
 8000f82:	6863      	ldr	r3, [r4, #4]
 8000f84:	60a3      	str	r3, [r4, #8]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	db03      	blt.n	8000f92 <_printf_i+0xe6>
 8000f8a:	2204      	movs	r2, #4
 8000f8c:	6821      	ldr	r1, [r4, #0]
 8000f8e:	4391      	bics	r1, r2
 8000f90:	6021      	str	r1, [r4, #0]
 8000f92:	2d00      	cmp	r5, #0
 8000f94:	d102      	bne.n	8000f9c <_printf_i+0xf0>
 8000f96:	9e04      	ldr	r6, [sp, #16]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d00c      	beq.n	8000fb6 <_printf_i+0x10a>
 8000f9c:	9e04      	ldr	r6, [sp, #16]
 8000f9e:	0028      	movs	r0, r5
 8000fa0:	0039      	movs	r1, r7
 8000fa2:	f7ff f941 	bl	8000228 <__aeabi_uidivmod>
 8000fa6:	9b03      	ldr	r3, [sp, #12]
 8000fa8:	3e01      	subs	r6, #1
 8000faa:	5c5b      	ldrb	r3, [r3, r1]
 8000fac:	7033      	strb	r3, [r6, #0]
 8000fae:	002b      	movs	r3, r5
 8000fb0:	0005      	movs	r5, r0
 8000fb2:	429f      	cmp	r7, r3
 8000fb4:	d9f3      	bls.n	8000f9e <_printf_i+0xf2>
 8000fb6:	2f08      	cmp	r7, #8
 8000fb8:	d109      	bne.n	8000fce <_printf_i+0x122>
 8000fba:	6823      	ldr	r3, [r4, #0]
 8000fbc:	07db      	lsls	r3, r3, #31
 8000fbe:	d506      	bpl.n	8000fce <_printf_i+0x122>
 8000fc0:	6863      	ldr	r3, [r4, #4]
 8000fc2:	6922      	ldr	r2, [r4, #16]
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	dc02      	bgt.n	8000fce <_printf_i+0x122>
 8000fc8:	2330      	movs	r3, #48	; 0x30
 8000fca:	3e01      	subs	r6, #1
 8000fcc:	7033      	strb	r3, [r6, #0]
 8000fce:	9b04      	ldr	r3, [sp, #16]
 8000fd0:	1b9b      	subs	r3, r3, r6
 8000fd2:	6123      	str	r3, [r4, #16]
 8000fd4:	9b07      	ldr	r3, [sp, #28]
 8000fd6:	0021      	movs	r1, r4
 8000fd8:	9300      	str	r3, [sp, #0]
 8000fda:	9805      	ldr	r0, [sp, #20]
 8000fdc:	9b06      	ldr	r3, [sp, #24]
 8000fde:	aa09      	add	r2, sp, #36	; 0x24
 8000fe0:	f7ff fef4 	bl	8000dcc <_printf_common>
 8000fe4:	1c43      	adds	r3, r0, #1
 8000fe6:	d14c      	bne.n	8001082 <_printf_i+0x1d6>
 8000fe8:	2001      	movs	r0, #1
 8000fea:	4240      	negs	r0, r0
 8000fec:	b00b      	add	sp, #44	; 0x2c
 8000fee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ff0:	3145      	adds	r1, #69	; 0x45
 8000ff2:	700a      	strb	r2, [r1, #0]
 8000ff4:	4a34      	ldr	r2, [pc, #208]	; (80010c8 <_printf_i+0x21c>)
 8000ff6:	9203      	str	r2, [sp, #12]
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	6821      	ldr	r1, [r4, #0]
 8000ffc:	ca20      	ldmia	r2!, {r5}
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	0608      	lsls	r0, r1, #24
 8001002:	d516      	bpl.n	8001032 <_printf_i+0x186>
 8001004:	07cb      	lsls	r3, r1, #31
 8001006:	d502      	bpl.n	800100e <_printf_i+0x162>
 8001008:	2320      	movs	r3, #32
 800100a:	4319      	orrs	r1, r3
 800100c:	6021      	str	r1, [r4, #0]
 800100e:	2710      	movs	r7, #16
 8001010:	2d00      	cmp	r5, #0
 8001012:	d1b2      	bne.n	8000f7a <_printf_i+0xce>
 8001014:	2320      	movs	r3, #32
 8001016:	6822      	ldr	r2, [r4, #0]
 8001018:	439a      	bics	r2, r3
 800101a:	6022      	str	r2, [r4, #0]
 800101c:	e7ad      	b.n	8000f7a <_printf_i+0xce>
 800101e:	2220      	movs	r2, #32
 8001020:	6809      	ldr	r1, [r1, #0]
 8001022:	430a      	orrs	r2, r1
 8001024:	6022      	str	r2, [r4, #0]
 8001026:	0022      	movs	r2, r4
 8001028:	2178      	movs	r1, #120	; 0x78
 800102a:	3245      	adds	r2, #69	; 0x45
 800102c:	7011      	strb	r1, [r2, #0]
 800102e:	4a27      	ldr	r2, [pc, #156]	; (80010cc <_printf_i+0x220>)
 8001030:	e7e1      	b.n	8000ff6 <_printf_i+0x14a>
 8001032:	0648      	lsls	r0, r1, #25
 8001034:	d5e6      	bpl.n	8001004 <_printf_i+0x158>
 8001036:	b2ad      	uxth	r5, r5
 8001038:	e7e4      	b.n	8001004 <_printf_i+0x158>
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	680d      	ldr	r5, [r1, #0]
 800103e:	1d10      	adds	r0, r2, #4
 8001040:	6949      	ldr	r1, [r1, #20]
 8001042:	6018      	str	r0, [r3, #0]
 8001044:	6813      	ldr	r3, [r2, #0]
 8001046:	062e      	lsls	r6, r5, #24
 8001048:	d501      	bpl.n	800104e <_printf_i+0x1a2>
 800104a:	6019      	str	r1, [r3, #0]
 800104c:	e002      	b.n	8001054 <_printf_i+0x1a8>
 800104e:	066d      	lsls	r5, r5, #25
 8001050:	d5fb      	bpl.n	800104a <_printf_i+0x19e>
 8001052:	8019      	strh	r1, [r3, #0]
 8001054:	2300      	movs	r3, #0
 8001056:	9e04      	ldr	r6, [sp, #16]
 8001058:	6123      	str	r3, [r4, #16]
 800105a:	e7bb      	b.n	8000fd4 <_printf_i+0x128>
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	1d11      	adds	r1, r2, #4
 8001060:	6019      	str	r1, [r3, #0]
 8001062:	6816      	ldr	r6, [r2, #0]
 8001064:	2100      	movs	r1, #0
 8001066:	0030      	movs	r0, r6
 8001068:	6862      	ldr	r2, [r4, #4]
 800106a:	f000 facf 	bl	800160c <memchr>
 800106e:	2800      	cmp	r0, #0
 8001070:	d001      	beq.n	8001076 <_printf_i+0x1ca>
 8001072:	1b80      	subs	r0, r0, r6
 8001074:	6060      	str	r0, [r4, #4]
 8001076:	6863      	ldr	r3, [r4, #4]
 8001078:	6123      	str	r3, [r4, #16]
 800107a:	2300      	movs	r3, #0
 800107c:	9a04      	ldr	r2, [sp, #16]
 800107e:	7013      	strb	r3, [r2, #0]
 8001080:	e7a8      	b.n	8000fd4 <_printf_i+0x128>
 8001082:	6923      	ldr	r3, [r4, #16]
 8001084:	0032      	movs	r2, r6
 8001086:	9906      	ldr	r1, [sp, #24]
 8001088:	9805      	ldr	r0, [sp, #20]
 800108a:	9d07      	ldr	r5, [sp, #28]
 800108c:	47a8      	blx	r5
 800108e:	1c43      	adds	r3, r0, #1
 8001090:	d0aa      	beq.n	8000fe8 <_printf_i+0x13c>
 8001092:	6823      	ldr	r3, [r4, #0]
 8001094:	079b      	lsls	r3, r3, #30
 8001096:	d415      	bmi.n	80010c4 <_printf_i+0x218>
 8001098:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800109a:	68e0      	ldr	r0, [r4, #12]
 800109c:	4298      	cmp	r0, r3
 800109e:	daa5      	bge.n	8000fec <_printf_i+0x140>
 80010a0:	0018      	movs	r0, r3
 80010a2:	e7a3      	b.n	8000fec <_printf_i+0x140>
 80010a4:	0022      	movs	r2, r4
 80010a6:	2301      	movs	r3, #1
 80010a8:	9906      	ldr	r1, [sp, #24]
 80010aa:	9805      	ldr	r0, [sp, #20]
 80010ac:	9e07      	ldr	r6, [sp, #28]
 80010ae:	3219      	adds	r2, #25
 80010b0:	47b0      	blx	r6
 80010b2:	1c43      	adds	r3, r0, #1
 80010b4:	d098      	beq.n	8000fe8 <_printf_i+0x13c>
 80010b6:	3501      	adds	r5, #1
 80010b8:	68e3      	ldr	r3, [r4, #12]
 80010ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80010bc:	1a9b      	subs	r3, r3, r2
 80010be:	42ab      	cmp	r3, r5
 80010c0:	dcf0      	bgt.n	80010a4 <_printf_i+0x1f8>
 80010c2:	e7e9      	b.n	8001098 <_printf_i+0x1ec>
 80010c4:	2500      	movs	r5, #0
 80010c6:	e7f7      	b.n	80010b8 <_printf_i+0x20c>
 80010c8:	080017e9 	.word	0x080017e9
 80010cc:	080017fa 	.word	0x080017fa

080010d0 <_sbrk_r>:
 80010d0:	2300      	movs	r3, #0
 80010d2:	b570      	push	{r4, r5, r6, lr}
 80010d4:	4d06      	ldr	r5, [pc, #24]	; (80010f0 <_sbrk_r+0x20>)
 80010d6:	0004      	movs	r4, r0
 80010d8:	0008      	movs	r0, r1
 80010da:	602b      	str	r3, [r5, #0]
 80010dc:	f7ff f9c6 	bl	800046c <_sbrk>
 80010e0:	1c43      	adds	r3, r0, #1
 80010e2:	d103      	bne.n	80010ec <_sbrk_r+0x1c>
 80010e4:	682b      	ldr	r3, [r5, #0]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d000      	beq.n	80010ec <_sbrk_r+0x1c>
 80010ea:	6023      	str	r3, [r4, #0]
 80010ec:	bd70      	pop	{r4, r5, r6, pc}
 80010ee:	46c0      	nop			; (mov r8, r8)
 80010f0:	2000009c 	.word	0x2000009c

080010f4 <__sread>:
 80010f4:	b570      	push	{r4, r5, r6, lr}
 80010f6:	000c      	movs	r4, r1
 80010f8:	250e      	movs	r5, #14
 80010fa:	5f49      	ldrsh	r1, [r1, r5]
 80010fc:	f000 faec 	bl	80016d8 <_read_r>
 8001100:	2800      	cmp	r0, #0
 8001102:	db03      	blt.n	800110c <__sread+0x18>
 8001104:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001106:	181b      	adds	r3, r3, r0
 8001108:	6563      	str	r3, [r4, #84]	; 0x54
 800110a:	bd70      	pop	{r4, r5, r6, pc}
 800110c:	89a3      	ldrh	r3, [r4, #12]
 800110e:	4a02      	ldr	r2, [pc, #8]	; (8001118 <__sread+0x24>)
 8001110:	4013      	ands	r3, r2
 8001112:	81a3      	strh	r3, [r4, #12]
 8001114:	e7f9      	b.n	800110a <__sread+0x16>
 8001116:	46c0      	nop			; (mov r8, r8)
 8001118:	ffffefff 	.word	0xffffefff

0800111c <__swrite>:
 800111c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800111e:	001f      	movs	r7, r3
 8001120:	898b      	ldrh	r3, [r1, #12]
 8001122:	0005      	movs	r5, r0
 8001124:	000c      	movs	r4, r1
 8001126:	0016      	movs	r6, r2
 8001128:	05db      	lsls	r3, r3, #23
 800112a:	d505      	bpl.n	8001138 <__swrite+0x1c>
 800112c:	230e      	movs	r3, #14
 800112e:	5ec9      	ldrsh	r1, [r1, r3]
 8001130:	2200      	movs	r2, #0
 8001132:	2302      	movs	r3, #2
 8001134:	f000 f9ea 	bl	800150c <_lseek_r>
 8001138:	89a3      	ldrh	r3, [r4, #12]
 800113a:	4a05      	ldr	r2, [pc, #20]	; (8001150 <__swrite+0x34>)
 800113c:	0028      	movs	r0, r5
 800113e:	4013      	ands	r3, r2
 8001140:	81a3      	strh	r3, [r4, #12]
 8001142:	0032      	movs	r2, r6
 8001144:	230e      	movs	r3, #14
 8001146:	5ee1      	ldrsh	r1, [r4, r3]
 8001148:	003b      	movs	r3, r7
 800114a:	f000 f875 	bl	8001238 <_write_r>
 800114e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001150:	ffffefff 	.word	0xffffefff

08001154 <__sseek>:
 8001154:	b570      	push	{r4, r5, r6, lr}
 8001156:	000c      	movs	r4, r1
 8001158:	250e      	movs	r5, #14
 800115a:	5f49      	ldrsh	r1, [r1, r5]
 800115c:	f000 f9d6 	bl	800150c <_lseek_r>
 8001160:	89a3      	ldrh	r3, [r4, #12]
 8001162:	1c42      	adds	r2, r0, #1
 8001164:	d103      	bne.n	800116e <__sseek+0x1a>
 8001166:	4a05      	ldr	r2, [pc, #20]	; (800117c <__sseek+0x28>)
 8001168:	4013      	ands	r3, r2
 800116a:	81a3      	strh	r3, [r4, #12]
 800116c:	bd70      	pop	{r4, r5, r6, pc}
 800116e:	2280      	movs	r2, #128	; 0x80
 8001170:	0152      	lsls	r2, r2, #5
 8001172:	4313      	orrs	r3, r2
 8001174:	81a3      	strh	r3, [r4, #12]
 8001176:	6560      	str	r0, [r4, #84]	; 0x54
 8001178:	e7f8      	b.n	800116c <__sseek+0x18>
 800117a:	46c0      	nop			; (mov r8, r8)
 800117c:	ffffefff 	.word	0xffffefff

08001180 <__sclose>:
 8001180:	b510      	push	{r4, lr}
 8001182:	230e      	movs	r3, #14
 8001184:	5ec9      	ldrsh	r1, [r1, r3]
 8001186:	f000 f8e3 	bl	8001350 <_close_r>
 800118a:	bd10      	pop	{r4, pc}

0800118c <__swbuf_r>:
 800118c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800118e:	0005      	movs	r5, r0
 8001190:	000e      	movs	r6, r1
 8001192:	0014      	movs	r4, r2
 8001194:	2800      	cmp	r0, #0
 8001196:	d004      	beq.n	80011a2 <__swbuf_r+0x16>
 8001198:	6983      	ldr	r3, [r0, #24]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d101      	bne.n	80011a2 <__swbuf_r+0x16>
 800119e:	f7ff fb77 	bl	8000890 <__sinit>
 80011a2:	4b22      	ldr	r3, [pc, #136]	; (800122c <__swbuf_r+0xa0>)
 80011a4:	429c      	cmp	r4, r3
 80011a6:	d12e      	bne.n	8001206 <__swbuf_r+0x7a>
 80011a8:	686c      	ldr	r4, [r5, #4]
 80011aa:	69a3      	ldr	r3, [r4, #24]
 80011ac:	60a3      	str	r3, [r4, #8]
 80011ae:	89a3      	ldrh	r3, [r4, #12]
 80011b0:	071b      	lsls	r3, r3, #28
 80011b2:	d532      	bpl.n	800121a <__swbuf_r+0x8e>
 80011b4:	6923      	ldr	r3, [r4, #16]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d02f      	beq.n	800121a <__swbuf_r+0x8e>
 80011ba:	6823      	ldr	r3, [r4, #0]
 80011bc:	6922      	ldr	r2, [r4, #16]
 80011be:	b2f7      	uxtb	r7, r6
 80011c0:	1a98      	subs	r0, r3, r2
 80011c2:	6963      	ldr	r3, [r4, #20]
 80011c4:	b2f6      	uxtb	r6, r6
 80011c6:	4283      	cmp	r3, r0
 80011c8:	dc05      	bgt.n	80011d6 <__swbuf_r+0x4a>
 80011ca:	0021      	movs	r1, r4
 80011cc:	0028      	movs	r0, r5
 80011ce:	f000 f95d 	bl	800148c <_fflush_r>
 80011d2:	2800      	cmp	r0, #0
 80011d4:	d127      	bne.n	8001226 <__swbuf_r+0x9a>
 80011d6:	68a3      	ldr	r3, [r4, #8]
 80011d8:	3001      	adds	r0, #1
 80011da:	3b01      	subs	r3, #1
 80011dc:	60a3      	str	r3, [r4, #8]
 80011de:	6823      	ldr	r3, [r4, #0]
 80011e0:	1c5a      	adds	r2, r3, #1
 80011e2:	6022      	str	r2, [r4, #0]
 80011e4:	701f      	strb	r7, [r3, #0]
 80011e6:	6963      	ldr	r3, [r4, #20]
 80011e8:	4283      	cmp	r3, r0
 80011ea:	d004      	beq.n	80011f6 <__swbuf_r+0x6a>
 80011ec:	89a3      	ldrh	r3, [r4, #12]
 80011ee:	07db      	lsls	r3, r3, #31
 80011f0:	d507      	bpl.n	8001202 <__swbuf_r+0x76>
 80011f2:	2e0a      	cmp	r6, #10
 80011f4:	d105      	bne.n	8001202 <__swbuf_r+0x76>
 80011f6:	0021      	movs	r1, r4
 80011f8:	0028      	movs	r0, r5
 80011fa:	f000 f947 	bl	800148c <_fflush_r>
 80011fe:	2800      	cmp	r0, #0
 8001200:	d111      	bne.n	8001226 <__swbuf_r+0x9a>
 8001202:	0030      	movs	r0, r6
 8001204:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001206:	4b0a      	ldr	r3, [pc, #40]	; (8001230 <__swbuf_r+0xa4>)
 8001208:	429c      	cmp	r4, r3
 800120a:	d101      	bne.n	8001210 <__swbuf_r+0x84>
 800120c:	68ac      	ldr	r4, [r5, #8]
 800120e:	e7cc      	b.n	80011aa <__swbuf_r+0x1e>
 8001210:	4b08      	ldr	r3, [pc, #32]	; (8001234 <__swbuf_r+0xa8>)
 8001212:	429c      	cmp	r4, r3
 8001214:	d1c9      	bne.n	80011aa <__swbuf_r+0x1e>
 8001216:	68ec      	ldr	r4, [r5, #12]
 8001218:	e7c7      	b.n	80011aa <__swbuf_r+0x1e>
 800121a:	0021      	movs	r1, r4
 800121c:	0028      	movs	r0, r5
 800121e:	f000 f81f 	bl	8001260 <__swsetup_r>
 8001222:	2800      	cmp	r0, #0
 8001224:	d0c9      	beq.n	80011ba <__swbuf_r+0x2e>
 8001226:	2601      	movs	r6, #1
 8001228:	4276      	negs	r6, r6
 800122a:	e7ea      	b.n	8001202 <__swbuf_r+0x76>
 800122c:	08001798 	.word	0x08001798
 8001230:	080017b8 	.word	0x080017b8
 8001234:	08001778 	.word	0x08001778

08001238 <_write_r>:
 8001238:	b570      	push	{r4, r5, r6, lr}
 800123a:	0004      	movs	r4, r0
 800123c:	0008      	movs	r0, r1
 800123e:	0011      	movs	r1, r2
 8001240:	001a      	movs	r2, r3
 8001242:	2300      	movs	r3, #0
 8001244:	4d05      	ldr	r5, [pc, #20]	; (800125c <_write_r+0x24>)
 8001246:	602b      	str	r3, [r5, #0]
 8001248:	f7ff f8c8 	bl	80003dc <_write>
 800124c:	1c43      	adds	r3, r0, #1
 800124e:	d103      	bne.n	8001258 <_write_r+0x20>
 8001250:	682b      	ldr	r3, [r5, #0]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d000      	beq.n	8001258 <_write_r+0x20>
 8001256:	6023      	str	r3, [r4, #0]
 8001258:	bd70      	pop	{r4, r5, r6, pc}
 800125a:	46c0      	nop			; (mov r8, r8)
 800125c:	2000009c 	.word	0x2000009c

08001260 <__swsetup_r>:
 8001260:	4b37      	ldr	r3, [pc, #220]	; (8001340 <__swsetup_r+0xe0>)
 8001262:	b570      	push	{r4, r5, r6, lr}
 8001264:	681d      	ldr	r5, [r3, #0]
 8001266:	0006      	movs	r6, r0
 8001268:	000c      	movs	r4, r1
 800126a:	2d00      	cmp	r5, #0
 800126c:	d005      	beq.n	800127a <__swsetup_r+0x1a>
 800126e:	69ab      	ldr	r3, [r5, #24]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d102      	bne.n	800127a <__swsetup_r+0x1a>
 8001274:	0028      	movs	r0, r5
 8001276:	f7ff fb0b 	bl	8000890 <__sinit>
 800127a:	4b32      	ldr	r3, [pc, #200]	; (8001344 <__swsetup_r+0xe4>)
 800127c:	429c      	cmp	r4, r3
 800127e:	d10f      	bne.n	80012a0 <__swsetup_r+0x40>
 8001280:	686c      	ldr	r4, [r5, #4]
 8001282:	230c      	movs	r3, #12
 8001284:	5ee2      	ldrsh	r2, [r4, r3]
 8001286:	b293      	uxth	r3, r2
 8001288:	0711      	lsls	r1, r2, #28
 800128a:	d42d      	bmi.n	80012e8 <__swsetup_r+0x88>
 800128c:	06d9      	lsls	r1, r3, #27
 800128e:	d411      	bmi.n	80012b4 <__swsetup_r+0x54>
 8001290:	2309      	movs	r3, #9
 8001292:	2001      	movs	r0, #1
 8001294:	6033      	str	r3, [r6, #0]
 8001296:	3337      	adds	r3, #55	; 0x37
 8001298:	4313      	orrs	r3, r2
 800129a:	81a3      	strh	r3, [r4, #12]
 800129c:	4240      	negs	r0, r0
 800129e:	bd70      	pop	{r4, r5, r6, pc}
 80012a0:	4b29      	ldr	r3, [pc, #164]	; (8001348 <__swsetup_r+0xe8>)
 80012a2:	429c      	cmp	r4, r3
 80012a4:	d101      	bne.n	80012aa <__swsetup_r+0x4a>
 80012a6:	68ac      	ldr	r4, [r5, #8]
 80012a8:	e7eb      	b.n	8001282 <__swsetup_r+0x22>
 80012aa:	4b28      	ldr	r3, [pc, #160]	; (800134c <__swsetup_r+0xec>)
 80012ac:	429c      	cmp	r4, r3
 80012ae:	d1e8      	bne.n	8001282 <__swsetup_r+0x22>
 80012b0:	68ec      	ldr	r4, [r5, #12]
 80012b2:	e7e6      	b.n	8001282 <__swsetup_r+0x22>
 80012b4:	075b      	lsls	r3, r3, #29
 80012b6:	d513      	bpl.n	80012e0 <__swsetup_r+0x80>
 80012b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80012ba:	2900      	cmp	r1, #0
 80012bc:	d008      	beq.n	80012d0 <__swsetup_r+0x70>
 80012be:	0023      	movs	r3, r4
 80012c0:	3344      	adds	r3, #68	; 0x44
 80012c2:	4299      	cmp	r1, r3
 80012c4:	d002      	beq.n	80012cc <__swsetup_r+0x6c>
 80012c6:	0030      	movs	r0, r6
 80012c8:	f000 f9bc 	bl	8001644 <_free_r>
 80012cc:	2300      	movs	r3, #0
 80012ce:	6363      	str	r3, [r4, #52]	; 0x34
 80012d0:	2224      	movs	r2, #36	; 0x24
 80012d2:	89a3      	ldrh	r3, [r4, #12]
 80012d4:	4393      	bics	r3, r2
 80012d6:	81a3      	strh	r3, [r4, #12]
 80012d8:	2300      	movs	r3, #0
 80012da:	6063      	str	r3, [r4, #4]
 80012dc:	6923      	ldr	r3, [r4, #16]
 80012de:	6023      	str	r3, [r4, #0]
 80012e0:	2308      	movs	r3, #8
 80012e2:	89a2      	ldrh	r2, [r4, #12]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	81a3      	strh	r3, [r4, #12]
 80012e8:	6923      	ldr	r3, [r4, #16]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d10b      	bne.n	8001306 <__swsetup_r+0xa6>
 80012ee:	21a0      	movs	r1, #160	; 0xa0
 80012f0:	2280      	movs	r2, #128	; 0x80
 80012f2:	89a3      	ldrh	r3, [r4, #12]
 80012f4:	0089      	lsls	r1, r1, #2
 80012f6:	0092      	lsls	r2, r2, #2
 80012f8:	400b      	ands	r3, r1
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d003      	beq.n	8001306 <__swsetup_r+0xa6>
 80012fe:	0021      	movs	r1, r4
 8001300:	0030      	movs	r0, r6
 8001302:	f000 f93f 	bl	8001584 <__smakebuf_r>
 8001306:	220c      	movs	r2, #12
 8001308:	5ea3      	ldrsh	r3, [r4, r2]
 800130a:	2001      	movs	r0, #1
 800130c:	001a      	movs	r2, r3
 800130e:	b299      	uxth	r1, r3
 8001310:	4002      	ands	r2, r0
 8001312:	4203      	tst	r3, r0
 8001314:	d00f      	beq.n	8001336 <__swsetup_r+0xd6>
 8001316:	2200      	movs	r2, #0
 8001318:	60a2      	str	r2, [r4, #8]
 800131a:	6962      	ldr	r2, [r4, #20]
 800131c:	4252      	negs	r2, r2
 800131e:	61a2      	str	r2, [r4, #24]
 8001320:	2000      	movs	r0, #0
 8001322:	6922      	ldr	r2, [r4, #16]
 8001324:	4282      	cmp	r2, r0
 8001326:	d1ba      	bne.n	800129e <__swsetup_r+0x3e>
 8001328:	060a      	lsls	r2, r1, #24
 800132a:	d5b8      	bpl.n	800129e <__swsetup_r+0x3e>
 800132c:	2240      	movs	r2, #64	; 0x40
 800132e:	4313      	orrs	r3, r2
 8001330:	81a3      	strh	r3, [r4, #12]
 8001332:	3801      	subs	r0, #1
 8001334:	e7b3      	b.n	800129e <__swsetup_r+0x3e>
 8001336:	0788      	lsls	r0, r1, #30
 8001338:	d400      	bmi.n	800133c <__swsetup_r+0xdc>
 800133a:	6962      	ldr	r2, [r4, #20]
 800133c:	60a2      	str	r2, [r4, #8]
 800133e:	e7ef      	b.n	8001320 <__swsetup_r+0xc0>
 8001340:	20000004 	.word	0x20000004
 8001344:	08001798 	.word	0x08001798
 8001348:	080017b8 	.word	0x080017b8
 800134c:	08001778 	.word	0x08001778

08001350 <_close_r>:
 8001350:	2300      	movs	r3, #0
 8001352:	b570      	push	{r4, r5, r6, lr}
 8001354:	4d06      	ldr	r5, [pc, #24]	; (8001370 <_close_r+0x20>)
 8001356:	0004      	movs	r4, r0
 8001358:	0008      	movs	r0, r1
 800135a:	602b      	str	r3, [r5, #0]
 800135c:	f7ff f85a 	bl	8000414 <_close>
 8001360:	1c43      	adds	r3, r0, #1
 8001362:	d103      	bne.n	800136c <_close_r+0x1c>
 8001364:	682b      	ldr	r3, [r5, #0]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d000      	beq.n	800136c <_close_r+0x1c>
 800136a:	6023      	str	r3, [r4, #0]
 800136c:	bd70      	pop	{r4, r5, r6, pc}
 800136e:	46c0      	nop			; (mov r8, r8)
 8001370:	2000009c 	.word	0x2000009c

08001374 <__sflush_r>:
 8001374:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001376:	898b      	ldrh	r3, [r1, #12]
 8001378:	0005      	movs	r5, r0
 800137a:	000c      	movs	r4, r1
 800137c:	071a      	lsls	r2, r3, #28
 800137e:	d45f      	bmi.n	8001440 <__sflush_r+0xcc>
 8001380:	684a      	ldr	r2, [r1, #4]
 8001382:	2a00      	cmp	r2, #0
 8001384:	dc04      	bgt.n	8001390 <__sflush_r+0x1c>
 8001386:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8001388:	2a00      	cmp	r2, #0
 800138a:	dc01      	bgt.n	8001390 <__sflush_r+0x1c>
 800138c:	2000      	movs	r0, #0
 800138e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001390:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8001392:	2f00      	cmp	r7, #0
 8001394:	d0fa      	beq.n	800138c <__sflush_r+0x18>
 8001396:	2200      	movs	r2, #0
 8001398:	2180      	movs	r1, #128	; 0x80
 800139a:	682e      	ldr	r6, [r5, #0]
 800139c:	602a      	str	r2, [r5, #0]
 800139e:	001a      	movs	r2, r3
 80013a0:	0149      	lsls	r1, r1, #5
 80013a2:	400a      	ands	r2, r1
 80013a4:	420b      	tst	r3, r1
 80013a6:	d034      	beq.n	8001412 <__sflush_r+0x9e>
 80013a8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80013aa:	89a3      	ldrh	r3, [r4, #12]
 80013ac:	075b      	lsls	r3, r3, #29
 80013ae:	d506      	bpl.n	80013be <__sflush_r+0x4a>
 80013b0:	6863      	ldr	r3, [r4, #4]
 80013b2:	1ac0      	subs	r0, r0, r3
 80013b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <__sflush_r+0x4a>
 80013ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80013bc:	1ac0      	subs	r0, r0, r3
 80013be:	0002      	movs	r2, r0
 80013c0:	6a21      	ldr	r1, [r4, #32]
 80013c2:	2300      	movs	r3, #0
 80013c4:	0028      	movs	r0, r5
 80013c6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80013c8:	47b8      	blx	r7
 80013ca:	89a1      	ldrh	r1, [r4, #12]
 80013cc:	1c43      	adds	r3, r0, #1
 80013ce:	d106      	bne.n	80013de <__sflush_r+0x6a>
 80013d0:	682b      	ldr	r3, [r5, #0]
 80013d2:	2b1d      	cmp	r3, #29
 80013d4:	d831      	bhi.n	800143a <__sflush_r+0xc6>
 80013d6:	4a2c      	ldr	r2, [pc, #176]	; (8001488 <__sflush_r+0x114>)
 80013d8:	40da      	lsrs	r2, r3
 80013da:	07d3      	lsls	r3, r2, #31
 80013dc:	d52d      	bpl.n	800143a <__sflush_r+0xc6>
 80013de:	2300      	movs	r3, #0
 80013e0:	6063      	str	r3, [r4, #4]
 80013e2:	6923      	ldr	r3, [r4, #16]
 80013e4:	6023      	str	r3, [r4, #0]
 80013e6:	04cb      	lsls	r3, r1, #19
 80013e8:	d505      	bpl.n	80013f6 <__sflush_r+0x82>
 80013ea:	1c43      	adds	r3, r0, #1
 80013ec:	d102      	bne.n	80013f4 <__sflush_r+0x80>
 80013ee:	682b      	ldr	r3, [r5, #0]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d100      	bne.n	80013f6 <__sflush_r+0x82>
 80013f4:	6560      	str	r0, [r4, #84]	; 0x54
 80013f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80013f8:	602e      	str	r6, [r5, #0]
 80013fa:	2900      	cmp	r1, #0
 80013fc:	d0c6      	beq.n	800138c <__sflush_r+0x18>
 80013fe:	0023      	movs	r3, r4
 8001400:	3344      	adds	r3, #68	; 0x44
 8001402:	4299      	cmp	r1, r3
 8001404:	d002      	beq.n	800140c <__sflush_r+0x98>
 8001406:	0028      	movs	r0, r5
 8001408:	f000 f91c 	bl	8001644 <_free_r>
 800140c:	2000      	movs	r0, #0
 800140e:	6360      	str	r0, [r4, #52]	; 0x34
 8001410:	e7bd      	b.n	800138e <__sflush_r+0x1a>
 8001412:	2301      	movs	r3, #1
 8001414:	0028      	movs	r0, r5
 8001416:	6a21      	ldr	r1, [r4, #32]
 8001418:	47b8      	blx	r7
 800141a:	1c43      	adds	r3, r0, #1
 800141c:	d1c5      	bne.n	80013aa <__sflush_r+0x36>
 800141e:	682b      	ldr	r3, [r5, #0]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d0c2      	beq.n	80013aa <__sflush_r+0x36>
 8001424:	2b1d      	cmp	r3, #29
 8001426:	d001      	beq.n	800142c <__sflush_r+0xb8>
 8001428:	2b16      	cmp	r3, #22
 800142a:	d101      	bne.n	8001430 <__sflush_r+0xbc>
 800142c:	602e      	str	r6, [r5, #0]
 800142e:	e7ad      	b.n	800138c <__sflush_r+0x18>
 8001430:	2340      	movs	r3, #64	; 0x40
 8001432:	89a2      	ldrh	r2, [r4, #12]
 8001434:	4313      	orrs	r3, r2
 8001436:	81a3      	strh	r3, [r4, #12]
 8001438:	e7a9      	b.n	800138e <__sflush_r+0x1a>
 800143a:	2340      	movs	r3, #64	; 0x40
 800143c:	430b      	orrs	r3, r1
 800143e:	e7fa      	b.n	8001436 <__sflush_r+0xc2>
 8001440:	690f      	ldr	r7, [r1, #16]
 8001442:	2f00      	cmp	r7, #0
 8001444:	d0a2      	beq.n	800138c <__sflush_r+0x18>
 8001446:	680a      	ldr	r2, [r1, #0]
 8001448:	600f      	str	r7, [r1, #0]
 800144a:	1bd2      	subs	r2, r2, r7
 800144c:	9201      	str	r2, [sp, #4]
 800144e:	2200      	movs	r2, #0
 8001450:	079b      	lsls	r3, r3, #30
 8001452:	d100      	bne.n	8001456 <__sflush_r+0xe2>
 8001454:	694a      	ldr	r2, [r1, #20]
 8001456:	60a2      	str	r2, [r4, #8]
 8001458:	9b01      	ldr	r3, [sp, #4]
 800145a:	2b00      	cmp	r3, #0
 800145c:	dc00      	bgt.n	8001460 <__sflush_r+0xec>
 800145e:	e795      	b.n	800138c <__sflush_r+0x18>
 8001460:	003a      	movs	r2, r7
 8001462:	0028      	movs	r0, r5
 8001464:	9b01      	ldr	r3, [sp, #4]
 8001466:	6a21      	ldr	r1, [r4, #32]
 8001468:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800146a:	47b0      	blx	r6
 800146c:	2800      	cmp	r0, #0
 800146e:	dc06      	bgt.n	800147e <__sflush_r+0x10a>
 8001470:	2340      	movs	r3, #64	; 0x40
 8001472:	2001      	movs	r0, #1
 8001474:	89a2      	ldrh	r2, [r4, #12]
 8001476:	4240      	negs	r0, r0
 8001478:	4313      	orrs	r3, r2
 800147a:	81a3      	strh	r3, [r4, #12]
 800147c:	e787      	b.n	800138e <__sflush_r+0x1a>
 800147e:	9b01      	ldr	r3, [sp, #4]
 8001480:	183f      	adds	r7, r7, r0
 8001482:	1a1b      	subs	r3, r3, r0
 8001484:	9301      	str	r3, [sp, #4]
 8001486:	e7e7      	b.n	8001458 <__sflush_r+0xe4>
 8001488:	20400001 	.word	0x20400001

0800148c <_fflush_r>:
 800148c:	690b      	ldr	r3, [r1, #16]
 800148e:	b570      	push	{r4, r5, r6, lr}
 8001490:	0005      	movs	r5, r0
 8001492:	000c      	movs	r4, r1
 8001494:	2b00      	cmp	r3, #0
 8001496:	d102      	bne.n	800149e <_fflush_r+0x12>
 8001498:	2500      	movs	r5, #0
 800149a:	0028      	movs	r0, r5
 800149c:	bd70      	pop	{r4, r5, r6, pc}
 800149e:	2800      	cmp	r0, #0
 80014a0:	d004      	beq.n	80014ac <_fflush_r+0x20>
 80014a2:	6983      	ldr	r3, [r0, #24]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d101      	bne.n	80014ac <_fflush_r+0x20>
 80014a8:	f7ff f9f2 	bl	8000890 <__sinit>
 80014ac:	4b14      	ldr	r3, [pc, #80]	; (8001500 <_fflush_r+0x74>)
 80014ae:	429c      	cmp	r4, r3
 80014b0:	d11b      	bne.n	80014ea <_fflush_r+0x5e>
 80014b2:	686c      	ldr	r4, [r5, #4]
 80014b4:	220c      	movs	r2, #12
 80014b6:	5ea3      	ldrsh	r3, [r4, r2]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d0ed      	beq.n	8001498 <_fflush_r+0xc>
 80014bc:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80014be:	07d2      	lsls	r2, r2, #31
 80014c0:	d404      	bmi.n	80014cc <_fflush_r+0x40>
 80014c2:	059b      	lsls	r3, r3, #22
 80014c4:	d402      	bmi.n	80014cc <_fflush_r+0x40>
 80014c6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80014c8:	f7ff fa83 	bl	80009d2 <__retarget_lock_acquire_recursive>
 80014cc:	0028      	movs	r0, r5
 80014ce:	0021      	movs	r1, r4
 80014d0:	f7ff ff50 	bl	8001374 <__sflush_r>
 80014d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80014d6:	0005      	movs	r5, r0
 80014d8:	07db      	lsls	r3, r3, #31
 80014da:	d4de      	bmi.n	800149a <_fflush_r+0xe>
 80014dc:	89a3      	ldrh	r3, [r4, #12]
 80014de:	059b      	lsls	r3, r3, #22
 80014e0:	d4db      	bmi.n	800149a <_fflush_r+0xe>
 80014e2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80014e4:	f7ff fa76 	bl	80009d4 <__retarget_lock_release_recursive>
 80014e8:	e7d7      	b.n	800149a <_fflush_r+0xe>
 80014ea:	4b06      	ldr	r3, [pc, #24]	; (8001504 <_fflush_r+0x78>)
 80014ec:	429c      	cmp	r4, r3
 80014ee:	d101      	bne.n	80014f4 <_fflush_r+0x68>
 80014f0:	68ac      	ldr	r4, [r5, #8]
 80014f2:	e7df      	b.n	80014b4 <_fflush_r+0x28>
 80014f4:	4b04      	ldr	r3, [pc, #16]	; (8001508 <_fflush_r+0x7c>)
 80014f6:	429c      	cmp	r4, r3
 80014f8:	d1dc      	bne.n	80014b4 <_fflush_r+0x28>
 80014fa:	68ec      	ldr	r4, [r5, #12]
 80014fc:	e7da      	b.n	80014b4 <_fflush_r+0x28>
 80014fe:	46c0      	nop			; (mov r8, r8)
 8001500:	08001798 	.word	0x08001798
 8001504:	080017b8 	.word	0x080017b8
 8001508:	08001778 	.word	0x08001778

0800150c <_lseek_r>:
 800150c:	b570      	push	{r4, r5, r6, lr}
 800150e:	0004      	movs	r4, r0
 8001510:	0008      	movs	r0, r1
 8001512:	0011      	movs	r1, r2
 8001514:	001a      	movs	r2, r3
 8001516:	2300      	movs	r3, #0
 8001518:	4d05      	ldr	r5, [pc, #20]	; (8001530 <_lseek_r+0x24>)
 800151a:	602b      	str	r3, [r5, #0]
 800151c:	f7fe ff9b 	bl	8000456 <_lseek>
 8001520:	1c43      	adds	r3, r0, #1
 8001522:	d103      	bne.n	800152c <_lseek_r+0x20>
 8001524:	682b      	ldr	r3, [r5, #0]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d000      	beq.n	800152c <_lseek_r+0x20>
 800152a:	6023      	str	r3, [r4, #0]
 800152c:	bd70      	pop	{r4, r5, r6, pc}
 800152e:	46c0      	nop			; (mov r8, r8)
 8001530:	2000009c 	.word	0x2000009c

08001534 <__swhatbuf_r>:
 8001534:	b570      	push	{r4, r5, r6, lr}
 8001536:	000e      	movs	r6, r1
 8001538:	001d      	movs	r5, r3
 800153a:	230e      	movs	r3, #14
 800153c:	5ec9      	ldrsh	r1, [r1, r3]
 800153e:	0014      	movs	r4, r2
 8001540:	b096      	sub	sp, #88	; 0x58
 8001542:	2900      	cmp	r1, #0
 8001544:	da08      	bge.n	8001558 <__swhatbuf_r+0x24>
 8001546:	220c      	movs	r2, #12
 8001548:	5eb3      	ldrsh	r3, [r6, r2]
 800154a:	2200      	movs	r2, #0
 800154c:	602a      	str	r2, [r5, #0]
 800154e:	061b      	lsls	r3, r3, #24
 8001550:	d411      	bmi.n	8001576 <__swhatbuf_r+0x42>
 8001552:	2380      	movs	r3, #128	; 0x80
 8001554:	00db      	lsls	r3, r3, #3
 8001556:	e00f      	b.n	8001578 <__swhatbuf_r+0x44>
 8001558:	466a      	mov	r2, sp
 800155a:	f000 f8d1 	bl	8001700 <_fstat_r>
 800155e:	2800      	cmp	r0, #0
 8001560:	dbf1      	blt.n	8001546 <__swhatbuf_r+0x12>
 8001562:	23f0      	movs	r3, #240	; 0xf0
 8001564:	9901      	ldr	r1, [sp, #4]
 8001566:	021b      	lsls	r3, r3, #8
 8001568:	4019      	ands	r1, r3
 800156a:	4b05      	ldr	r3, [pc, #20]	; (8001580 <__swhatbuf_r+0x4c>)
 800156c:	18c9      	adds	r1, r1, r3
 800156e:	424b      	negs	r3, r1
 8001570:	4159      	adcs	r1, r3
 8001572:	6029      	str	r1, [r5, #0]
 8001574:	e7ed      	b.n	8001552 <__swhatbuf_r+0x1e>
 8001576:	2340      	movs	r3, #64	; 0x40
 8001578:	2000      	movs	r0, #0
 800157a:	6023      	str	r3, [r4, #0]
 800157c:	b016      	add	sp, #88	; 0x58
 800157e:	bd70      	pop	{r4, r5, r6, pc}
 8001580:	ffffe000 	.word	0xffffe000

08001584 <__smakebuf_r>:
 8001584:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001586:	2602      	movs	r6, #2
 8001588:	898b      	ldrh	r3, [r1, #12]
 800158a:	0005      	movs	r5, r0
 800158c:	000c      	movs	r4, r1
 800158e:	4233      	tst	r3, r6
 8001590:	d006      	beq.n	80015a0 <__smakebuf_r+0x1c>
 8001592:	0023      	movs	r3, r4
 8001594:	3347      	adds	r3, #71	; 0x47
 8001596:	6023      	str	r3, [r4, #0]
 8001598:	6123      	str	r3, [r4, #16]
 800159a:	2301      	movs	r3, #1
 800159c:	6163      	str	r3, [r4, #20]
 800159e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80015a0:	466a      	mov	r2, sp
 80015a2:	ab01      	add	r3, sp, #4
 80015a4:	f7ff ffc6 	bl	8001534 <__swhatbuf_r>
 80015a8:	9900      	ldr	r1, [sp, #0]
 80015aa:	0007      	movs	r7, r0
 80015ac:	0028      	movs	r0, r5
 80015ae:	f7ff fa35 	bl	8000a1c <_malloc_r>
 80015b2:	2800      	cmp	r0, #0
 80015b4:	d108      	bne.n	80015c8 <__smakebuf_r+0x44>
 80015b6:	220c      	movs	r2, #12
 80015b8:	5ea3      	ldrsh	r3, [r4, r2]
 80015ba:	059a      	lsls	r2, r3, #22
 80015bc:	d4ef      	bmi.n	800159e <__smakebuf_r+0x1a>
 80015be:	2203      	movs	r2, #3
 80015c0:	4393      	bics	r3, r2
 80015c2:	431e      	orrs	r6, r3
 80015c4:	81a6      	strh	r6, [r4, #12]
 80015c6:	e7e4      	b.n	8001592 <__smakebuf_r+0xe>
 80015c8:	4b0f      	ldr	r3, [pc, #60]	; (8001608 <__smakebuf_r+0x84>)
 80015ca:	62ab      	str	r3, [r5, #40]	; 0x28
 80015cc:	2380      	movs	r3, #128	; 0x80
 80015ce:	89a2      	ldrh	r2, [r4, #12]
 80015d0:	6020      	str	r0, [r4, #0]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	81a3      	strh	r3, [r4, #12]
 80015d6:	9b00      	ldr	r3, [sp, #0]
 80015d8:	6120      	str	r0, [r4, #16]
 80015da:	6163      	str	r3, [r4, #20]
 80015dc:	9b01      	ldr	r3, [sp, #4]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d00d      	beq.n	80015fe <__smakebuf_r+0x7a>
 80015e2:	0028      	movs	r0, r5
 80015e4:	230e      	movs	r3, #14
 80015e6:	5ee1      	ldrsh	r1, [r4, r3]
 80015e8:	f000 f89c 	bl	8001724 <_isatty_r>
 80015ec:	2800      	cmp	r0, #0
 80015ee:	d006      	beq.n	80015fe <__smakebuf_r+0x7a>
 80015f0:	2203      	movs	r2, #3
 80015f2:	89a3      	ldrh	r3, [r4, #12]
 80015f4:	4393      	bics	r3, r2
 80015f6:	001a      	movs	r2, r3
 80015f8:	2301      	movs	r3, #1
 80015fa:	4313      	orrs	r3, r2
 80015fc:	81a3      	strh	r3, [r4, #12]
 80015fe:	89a0      	ldrh	r0, [r4, #12]
 8001600:	4307      	orrs	r7, r0
 8001602:	81a7      	strh	r7, [r4, #12]
 8001604:	e7cb      	b.n	800159e <__smakebuf_r+0x1a>
 8001606:	46c0      	nop			; (mov r8, r8)
 8001608:	08000815 	.word	0x08000815

0800160c <memchr>:
 800160c:	b2c9      	uxtb	r1, r1
 800160e:	1882      	adds	r2, r0, r2
 8001610:	4290      	cmp	r0, r2
 8001612:	d101      	bne.n	8001618 <memchr+0xc>
 8001614:	2000      	movs	r0, #0
 8001616:	4770      	bx	lr
 8001618:	7803      	ldrb	r3, [r0, #0]
 800161a:	428b      	cmp	r3, r1
 800161c:	d0fb      	beq.n	8001616 <memchr+0xa>
 800161e:	3001      	adds	r0, #1
 8001620:	e7f6      	b.n	8001610 <memchr+0x4>
	...

08001624 <__malloc_lock>:
 8001624:	b510      	push	{r4, lr}
 8001626:	4802      	ldr	r0, [pc, #8]	; (8001630 <__malloc_lock+0xc>)
 8001628:	f7ff f9d3 	bl	80009d2 <__retarget_lock_acquire_recursive>
 800162c:	bd10      	pop	{r4, pc}
 800162e:	46c0      	nop			; (mov r8, r8)
 8001630:	20000090 	.word	0x20000090

08001634 <__malloc_unlock>:
 8001634:	b510      	push	{r4, lr}
 8001636:	4802      	ldr	r0, [pc, #8]	; (8001640 <__malloc_unlock+0xc>)
 8001638:	f7ff f9cc 	bl	80009d4 <__retarget_lock_release_recursive>
 800163c:	bd10      	pop	{r4, pc}
 800163e:	46c0      	nop			; (mov r8, r8)
 8001640:	20000090 	.word	0x20000090

08001644 <_free_r>:
 8001644:	b570      	push	{r4, r5, r6, lr}
 8001646:	0005      	movs	r5, r0
 8001648:	2900      	cmp	r1, #0
 800164a:	d010      	beq.n	800166e <_free_r+0x2a>
 800164c:	1f0c      	subs	r4, r1, #4
 800164e:	6823      	ldr	r3, [r4, #0]
 8001650:	2b00      	cmp	r3, #0
 8001652:	da00      	bge.n	8001656 <_free_r+0x12>
 8001654:	18e4      	adds	r4, r4, r3
 8001656:	0028      	movs	r0, r5
 8001658:	f7ff ffe4 	bl	8001624 <__malloc_lock>
 800165c:	4a1d      	ldr	r2, [pc, #116]	; (80016d4 <_free_r+0x90>)
 800165e:	6813      	ldr	r3, [r2, #0]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d105      	bne.n	8001670 <_free_r+0x2c>
 8001664:	6063      	str	r3, [r4, #4]
 8001666:	6014      	str	r4, [r2, #0]
 8001668:	0028      	movs	r0, r5
 800166a:	f7ff ffe3 	bl	8001634 <__malloc_unlock>
 800166e:	bd70      	pop	{r4, r5, r6, pc}
 8001670:	42a3      	cmp	r3, r4
 8001672:	d908      	bls.n	8001686 <_free_r+0x42>
 8001674:	6821      	ldr	r1, [r4, #0]
 8001676:	1860      	adds	r0, r4, r1
 8001678:	4283      	cmp	r3, r0
 800167a:	d1f3      	bne.n	8001664 <_free_r+0x20>
 800167c:	6818      	ldr	r0, [r3, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	1841      	adds	r1, r0, r1
 8001682:	6021      	str	r1, [r4, #0]
 8001684:	e7ee      	b.n	8001664 <_free_r+0x20>
 8001686:	001a      	movs	r2, r3
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <_free_r+0x4e>
 800168e:	42a3      	cmp	r3, r4
 8001690:	d9f9      	bls.n	8001686 <_free_r+0x42>
 8001692:	6811      	ldr	r1, [r2, #0]
 8001694:	1850      	adds	r0, r2, r1
 8001696:	42a0      	cmp	r0, r4
 8001698:	d10b      	bne.n	80016b2 <_free_r+0x6e>
 800169a:	6820      	ldr	r0, [r4, #0]
 800169c:	1809      	adds	r1, r1, r0
 800169e:	1850      	adds	r0, r2, r1
 80016a0:	6011      	str	r1, [r2, #0]
 80016a2:	4283      	cmp	r3, r0
 80016a4:	d1e0      	bne.n	8001668 <_free_r+0x24>
 80016a6:	6818      	ldr	r0, [r3, #0]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	1841      	adds	r1, r0, r1
 80016ac:	6011      	str	r1, [r2, #0]
 80016ae:	6053      	str	r3, [r2, #4]
 80016b0:	e7da      	b.n	8001668 <_free_r+0x24>
 80016b2:	42a0      	cmp	r0, r4
 80016b4:	d902      	bls.n	80016bc <_free_r+0x78>
 80016b6:	230c      	movs	r3, #12
 80016b8:	602b      	str	r3, [r5, #0]
 80016ba:	e7d5      	b.n	8001668 <_free_r+0x24>
 80016bc:	6821      	ldr	r1, [r4, #0]
 80016be:	1860      	adds	r0, r4, r1
 80016c0:	4283      	cmp	r3, r0
 80016c2:	d103      	bne.n	80016cc <_free_r+0x88>
 80016c4:	6818      	ldr	r0, [r3, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	1841      	adds	r1, r0, r1
 80016ca:	6021      	str	r1, [r4, #0]
 80016cc:	6063      	str	r3, [r4, #4]
 80016ce:	6054      	str	r4, [r2, #4]
 80016d0:	e7ca      	b.n	8001668 <_free_r+0x24>
 80016d2:	46c0      	nop			; (mov r8, r8)
 80016d4:	20000094 	.word	0x20000094

080016d8 <_read_r>:
 80016d8:	b570      	push	{r4, r5, r6, lr}
 80016da:	0004      	movs	r4, r0
 80016dc:	0008      	movs	r0, r1
 80016de:	0011      	movs	r1, r2
 80016e0:	001a      	movs	r2, r3
 80016e2:	2300      	movs	r3, #0
 80016e4:	4d05      	ldr	r5, [pc, #20]	; (80016fc <_read_r+0x24>)
 80016e6:	602b      	str	r3, [r5, #0]
 80016e8:	f7fe fe5b 	bl	80003a2 <_read>
 80016ec:	1c43      	adds	r3, r0, #1
 80016ee:	d103      	bne.n	80016f8 <_read_r+0x20>
 80016f0:	682b      	ldr	r3, [r5, #0]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d000      	beq.n	80016f8 <_read_r+0x20>
 80016f6:	6023      	str	r3, [r4, #0]
 80016f8:	bd70      	pop	{r4, r5, r6, pc}
 80016fa:	46c0      	nop			; (mov r8, r8)
 80016fc:	2000009c 	.word	0x2000009c

08001700 <_fstat_r>:
 8001700:	2300      	movs	r3, #0
 8001702:	b570      	push	{r4, r5, r6, lr}
 8001704:	4d06      	ldr	r5, [pc, #24]	; (8001720 <_fstat_r+0x20>)
 8001706:	0004      	movs	r4, r0
 8001708:	0008      	movs	r0, r1
 800170a:	0011      	movs	r1, r2
 800170c:	602b      	str	r3, [r5, #0]
 800170e:	f7fe fe8b 	bl	8000428 <_fstat>
 8001712:	1c43      	adds	r3, r0, #1
 8001714:	d103      	bne.n	800171e <_fstat_r+0x1e>
 8001716:	682b      	ldr	r3, [r5, #0]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d000      	beq.n	800171e <_fstat_r+0x1e>
 800171c:	6023      	str	r3, [r4, #0]
 800171e:	bd70      	pop	{r4, r5, r6, pc}
 8001720:	2000009c 	.word	0x2000009c

08001724 <_isatty_r>:
 8001724:	2300      	movs	r3, #0
 8001726:	b570      	push	{r4, r5, r6, lr}
 8001728:	4d06      	ldr	r5, [pc, #24]	; (8001744 <_isatty_r+0x20>)
 800172a:	0004      	movs	r4, r0
 800172c:	0008      	movs	r0, r1
 800172e:	602b      	str	r3, [r5, #0]
 8001730:	f7fe fe88 	bl	8000444 <_isatty>
 8001734:	1c43      	adds	r3, r0, #1
 8001736:	d103      	bne.n	8001740 <_isatty_r+0x1c>
 8001738:	682b      	ldr	r3, [r5, #0]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d000      	beq.n	8001740 <_isatty_r+0x1c>
 800173e:	6023      	str	r3, [r4, #0]
 8001740:	bd70      	pop	{r4, r5, r6, pc}
 8001742:	46c0      	nop			; (mov r8, r8)
 8001744:	2000009c 	.word	0x2000009c

08001748 <_init>:
 8001748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800174a:	46c0      	nop			; (mov r8, r8)
 800174c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800174e:	bc08      	pop	{r3}
 8001750:	469e      	mov	lr, r3
 8001752:	4770      	bx	lr

08001754 <_fini>:
 8001754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001756:	46c0      	nop			; (mov r8, r8)
 8001758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800175a:	bc08      	pop	{r3}
 800175c:	469e      	mov	lr, r3
 800175e:	4770      	bx	lr
