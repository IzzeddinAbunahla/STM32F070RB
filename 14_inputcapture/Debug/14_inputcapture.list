
14_inputcapture.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000334  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003f4  080003f4  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003f4  080003f4  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080003f4  080003f4  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003f4  080003f4  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003f4  080003f4  000103f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003f8  080003f8  000103f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080003fc  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000004  08000400  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  08000400  00020028  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000fbd  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000580  00000000  00000000  00020fe9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001a8  00000000  00000000  00021570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000150  00000000  00000000  00021718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000a6c  00000000  00000000  00021868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002884  00000000  00000000  000222d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005f426  00000000  00000000  00024b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00083f7e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000042c  00000000  00000000  00083fd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080003dc 	.word	0x080003dc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	080003dc 	.word	0x080003dc

08000108 <main>:
#include "tim.h"

int timestamp = 0;
//setup by connecting PA2 and PB4
int main (void)
{
 8000108:	b580      	push	{r7, lr}
 800010a:	af00      	add	r7, sp, #0
		tim3_PB4_output_compare();
 800010c:	f000 f82e 	bl	800016c <tim3_PB4_output_compare>
		tim15_PA2_input_capture();
 8000110:	f000 f898 	bl	8000244 <tim15_PA2_input_capture>

		while(1)
		{
			//wait until edge is captured
			while(!(TIM15->SR & SR_CC_1_INTERRUPT_FLAG)){}
 8000114:	46c0      	nop			; (mov r8, r8)
 8000116:	4b05      	ldr	r3, [pc, #20]	; (800012c <main+0x24>)
 8000118:	691b      	ldr	r3, [r3, #16]
 800011a:	2202      	movs	r2, #2
 800011c:	4013      	ands	r3, r2
 800011e:	d0fa      	beq.n	8000116 <main+0xe>
			//read captured value
			timestamp = TIM15->CCR1;
 8000120:	4b02      	ldr	r3, [pc, #8]	; (800012c <main+0x24>)
 8000122:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000124:	001a      	movs	r2, r3
 8000126:	4b02      	ldr	r3, [pc, #8]	; (8000130 <main+0x28>)
 8000128:	601a      	str	r2, [r3, #0]
			while(!(TIM15->SR & SR_CC_1_INTERRUPT_FLAG)){}
 800012a:	e7f3      	b.n	8000114 <main+0xc>
 800012c:	40014000 	.word	0x40014000
 8000130:	20000020 	.word	0x20000020

08000134 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000134:	b580      	push	{r7, lr}
 8000136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000138:	e7fe      	b.n	8000138 <NMI_Handler+0x4>

0800013a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800013a:	b580      	push	{r7, lr}
 800013c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800013e:	e7fe      	b.n	800013e <HardFault_Handler+0x4>

08000140 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000140:	b580      	push	{r7, lr}
 8000142:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000144:	46c0      	nop			; (mov r8, r8)
 8000146:	46bd      	mov	sp, r7
 8000148:	bd80      	pop	{r7, pc}

0800014a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800014a:	b580      	push	{r7, lr}
 800014c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800014e:	46c0      	nop			; (mov r8, r8)
 8000150:	46bd      	mov	sp, r7
 8000152:	bd80      	pop	{r7, pc}

08000154 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000154:	b580      	push	{r7, lr}
 8000156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000158:	f000 f90a 	bl	8000370 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800015c:	46c0      	nop			; (mov r8, r8)
 800015e:	46bd      	mov	sp, r7
 8000160:	bd80      	pop	{r7, pc}

08000162 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000162:	b580      	push	{r7, lr}
 8000164:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000166:	46c0      	nop			; (mov r8, r8)
 8000168:	46bd      	mov	sp, r7
 800016a:	bd80      	pop	{r7, pc}

0800016c <tim3_PB4_output_compare>:
 *
 */

//Output compare is the ability to trigger an output based on a time stamp in memory, without interrupting the execution of code by a processor or MCU.
void tim3_PB4_output_compare(void)
{
 800016c:	b580      	push	{r7, lr}
 800016e:	af00      	add	r7, sp, #0
	//RCC for GPIOB
	RCC->AHBENR |= GPIO_B_ENABLE;
 8000170:	4b2b      	ldr	r3, [pc, #172]	; (8000220 <tim3_PB4_output_compare+0xb4>)
 8000172:	695a      	ldr	r2, [r3, #20]
 8000174:	4b2a      	ldr	r3, [pc, #168]	; (8000220 <tim3_PB4_output_compare+0xb4>)
 8000176:	2180      	movs	r1, #128	; 0x80
 8000178:	02c9      	lsls	r1, r1, #11
 800017a:	430a      	orrs	r2, r1
 800017c:	615a      	str	r2, [r3, #20]
	//Enable alternate function mode in PB4
	GPIOB->MODER &= ~(1U<<8); //bitwise AND(&=), NOT(~) to set it to 0
 800017e:	4b29      	ldr	r3, [pc, #164]	; (8000224 <tim3_PB4_output_compare+0xb8>)
 8000180:	681a      	ldr	r2, [r3, #0]
 8000182:	4b28      	ldr	r3, [pc, #160]	; (8000224 <tim3_PB4_output_compare+0xb8>)
 8000184:	4928      	ldr	r1, [pc, #160]	; (8000228 <tim3_PB4_output_compare+0xbc>)
 8000186:	400a      	ands	r2, r1
 8000188:	601a      	str	r2, [r3, #0]
	GPIOB->MODER |= (1U<<9); //bitwise OR(|=) to set it to 1
 800018a:	4b26      	ldr	r3, [pc, #152]	; (8000224 <tim3_PB4_output_compare+0xb8>)
 800018c:	681a      	ldr	r2, [r3, #0]
 800018e:	4b25      	ldr	r3, [pc, #148]	; (8000224 <tim3_PB4_output_compare+0xb8>)
 8000190:	2180      	movs	r1, #128	; 0x80
 8000192:	0089      	lsls	r1, r1, #2
 8000194:	430a      	orrs	r2, r1
 8000196:	601a      	str	r2, [r3, #0]
	//Set PB4 alternate function type to TIM3_CH1 (AF1) 0001:AF1 (index 0 for AFRL index 1 for AFRH)
	GPIOB->AFR[0] |= (1U<<16); //bitwise OR(|=) to set it to 1
 8000198:	4b22      	ldr	r3, [pc, #136]	; (8000224 <tim3_PB4_output_compare+0xb8>)
 800019a:	6a1a      	ldr	r2, [r3, #32]
 800019c:	4b21      	ldr	r3, [pc, #132]	; (8000224 <tim3_PB4_output_compare+0xb8>)
 800019e:	2180      	movs	r1, #128	; 0x80
 80001a0:	0249      	lsls	r1, r1, #9
 80001a2:	430a      	orrs	r2, r1
 80001a4:	621a      	str	r2, [r3, #32]
	GPIOB->AFR[0] &= ~(1U<<17); //bitwise AND(&=), NOT(~) to set it to 0
 80001a6:	4b1f      	ldr	r3, [pc, #124]	; (8000224 <tim3_PB4_output_compare+0xb8>)
 80001a8:	6a1a      	ldr	r2, [r3, #32]
 80001aa:	4b1e      	ldr	r3, [pc, #120]	; (8000224 <tim3_PB4_output_compare+0xb8>)
 80001ac:	491f      	ldr	r1, [pc, #124]	; (800022c <tim3_PB4_output_compare+0xc0>)
 80001ae:	400a      	ands	r2, r1
 80001b0:	621a      	str	r2, [r3, #32]
	GPIOB->AFR[0] &= ~(1U<<18); //bitwise AND(&=), NOT(~) to set it to 0
 80001b2:	4b1c      	ldr	r3, [pc, #112]	; (8000224 <tim3_PB4_output_compare+0xb8>)
 80001b4:	6a1a      	ldr	r2, [r3, #32]
 80001b6:	4b1b      	ldr	r3, [pc, #108]	; (8000224 <tim3_PB4_output_compare+0xb8>)
 80001b8:	491d      	ldr	r1, [pc, #116]	; (8000230 <tim3_PB4_output_compare+0xc4>)
 80001ba:	400a      	ands	r2, r1
 80001bc:	621a      	str	r2, [r3, #32]
	GPIOB->AFR[0] &= ~(1U<<19); //bitwise AND(&=), NOT(~) to set it to 0
 80001be:	4b19      	ldr	r3, [pc, #100]	; (8000224 <tim3_PB4_output_compare+0xb8>)
 80001c0:	6a1a      	ldr	r2, [r3, #32]
 80001c2:	4b18      	ldr	r3, [pc, #96]	; (8000224 <tim3_PB4_output_compare+0xb8>)
 80001c4:	491b      	ldr	r1, [pc, #108]	; (8000234 <tim3_PB4_output_compare+0xc8>)
 80001c6:	400a      	ands	r2, r1
 80001c8:	621a      	str	r2, [r3, #32]
	//Enable RCC to Timer 3
	RCC->APB1ENR |= TIM3EN;
 80001ca:	4b15      	ldr	r3, [pc, #84]	; (8000220 <tim3_PB4_output_compare+0xb4>)
 80001cc:	69da      	ldr	r2, [r3, #28]
 80001ce:	4b14      	ldr	r3, [pc, #80]	; (8000220 <tim3_PB4_output_compare+0xb4>)
 80001d0:	2102      	movs	r1, #2
 80001d2:	430a      	orrs	r2, r1
 80001d4:	61da      	str	r2, [r3, #28]
	//Set Pre-scaler Value
	TIM3->PSC = 800 - 1; // 8,000,0000/800 = 10,000
 80001d6:	4b18      	ldr	r3, [pc, #96]	; (8000238 <tim3_PB4_output_compare+0xcc>)
 80001d8:	4a18      	ldr	r2, [pc, #96]	; (800023c <tim3_PB4_output_compare+0xd0>)
 80001da:	629a      	str	r2, [r3, #40]	; 0x28
	//Set Auto-Reload Value (Period)
	TIM3->ARR = 10000 - 1;
 80001dc:	4b16      	ldr	r3, [pc, #88]	; (8000238 <tim3_PB4_output_compare+0xcc>)
 80001de:	4a18      	ldr	r2, [pc, #96]	; (8000240 <tim3_PB4_output_compare+0xd4>)
 80001e0:	62da      	str	r2, [r3, #44]	; 0x2c
	//Set output compare toggle mode
	TIM3->CCMR1 |= (1U<<4);
 80001e2:	4b15      	ldr	r3, [pc, #84]	; (8000238 <tim3_PB4_output_compare+0xcc>)
 80001e4:	699a      	ldr	r2, [r3, #24]
 80001e6:	4b14      	ldr	r3, [pc, #80]	; (8000238 <tim3_PB4_output_compare+0xcc>)
 80001e8:	2110      	movs	r1, #16
 80001ea:	430a      	orrs	r2, r1
 80001ec:	619a      	str	r2, [r3, #24]
	TIM3->CCMR1 |= (1U<<5);
 80001ee:	4b12      	ldr	r3, [pc, #72]	; (8000238 <tim3_PB4_output_compare+0xcc>)
 80001f0:	699a      	ldr	r2, [r3, #24]
 80001f2:	4b11      	ldr	r3, [pc, #68]	; (8000238 <tim3_PB4_output_compare+0xcc>)
 80001f4:	2120      	movs	r1, #32
 80001f6:	430a      	orrs	r2, r1
 80001f8:	619a      	str	r2, [r3, #24]
	//Enable timer 3 channel 1 in compare mode
	TIM3->CCER |= CH1_OUTPUT_ENABLE;
 80001fa:	4b0f      	ldr	r3, [pc, #60]	; (8000238 <tim3_PB4_output_compare+0xcc>)
 80001fc:	6a1a      	ldr	r2, [r3, #32]
 80001fe:	4b0e      	ldr	r3, [pc, #56]	; (8000238 <tim3_PB4_output_compare+0xcc>)
 8000200:	2101      	movs	r1, #1
 8000202:	430a      	orrs	r2, r1
 8000204:	621a      	str	r2, [r3, #32]
	//Clear Counter
	TIM3->CNT = 0;
 8000206:	4b0c      	ldr	r3, [pc, #48]	; (8000238 <tim3_PB4_output_compare+0xcc>)
 8000208:	2200      	movs	r2, #0
 800020a:	625a      	str	r2, [r3, #36]	; 0x24
	//Enable Timer
	TIM3->CR1 |= CR1_CEN;
 800020c:	4b0a      	ldr	r3, [pc, #40]	; (8000238 <tim3_PB4_output_compare+0xcc>)
 800020e:	681a      	ldr	r2, [r3, #0]
 8000210:	4b09      	ldr	r3, [pc, #36]	; (8000238 <tim3_PB4_output_compare+0xcc>)
 8000212:	2101      	movs	r1, #1
 8000214:	430a      	orrs	r2, r1
 8000216:	601a      	str	r2, [r3, #0]

}
 8000218:	46c0      	nop			; (mov r8, r8)
 800021a:	46bd      	mov	sp, r7
 800021c:	bd80      	pop	{r7, pc}
 800021e:	46c0      	nop			; (mov r8, r8)
 8000220:	40021000 	.word	0x40021000
 8000224:	48000400 	.word	0x48000400
 8000228:	fffffeff 	.word	0xfffffeff
 800022c:	fffdffff 	.word	0xfffdffff
 8000230:	fffbffff 	.word	0xfffbffff
 8000234:	fff7ffff 	.word	0xfff7ffff
 8000238:	40000400 	.word	0x40000400
 800023c:	0000031f 	.word	0x0000031f
 8000240:	0000270f 	.word	0x0000270f

08000244 <tim15_PA2_input_capture>:
void tim15_PA2_input_capture(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	af00      	add	r7, sp, #0
		//Enable clock access to GPIO A
		RCC->AHBENR |= GPIO_A_ENABLE;
 8000248:	4b2d      	ldr	r3, [pc, #180]	; (8000300 <tim15_PA2_input_capture+0xbc>)
 800024a:	695a      	ldr	r2, [r3, #20]
 800024c:	4b2c      	ldr	r3, [pc, #176]	; (8000300 <tim15_PA2_input_capture+0xbc>)
 800024e:	2180      	movs	r1, #128	; 0x80
 8000250:	0289      	lsls	r1, r1, #10
 8000252:	430a      	orrs	r2, r1
 8000254:	615a      	str	r2, [r3, #20]
		//Enable RCC to Timer 15
		RCC->APB2ENR |= TIM15EN;
 8000256:	4b2a      	ldr	r3, [pc, #168]	; (8000300 <tim15_PA2_input_capture+0xbc>)
 8000258:	699a      	ldr	r2, [r3, #24]
 800025a:	4b29      	ldr	r3, [pc, #164]	; (8000300 <tim15_PA2_input_capture+0xbc>)
 800025c:	2180      	movs	r1, #128	; 0x80
 800025e:	0249      	lsls	r1, r1, #9
 8000260:	430a      	orrs	r2, r1
 8000262:	619a      	str	r2, [r3, #24]
		//Enable alternate function mode in PA2
		GPIOA->MODER &= ~(1U<<4); //bitwise AND(&=), NOT(~) to set it to 0
 8000264:	2390      	movs	r3, #144	; 0x90
 8000266:	05db      	lsls	r3, r3, #23
 8000268:	681a      	ldr	r2, [r3, #0]
 800026a:	2390      	movs	r3, #144	; 0x90
 800026c:	05db      	lsls	r3, r3, #23
 800026e:	2110      	movs	r1, #16
 8000270:	438a      	bics	r2, r1
 8000272:	601a      	str	r2, [r3, #0]
		GPIOA->MODER |= (1U<5); //bitwise OR(|=) to set it to 1
 8000274:	2390      	movs	r3, #144	; 0x90
 8000276:	05db      	lsls	r3, r3, #23
 8000278:	681a      	ldr	r2, [r3, #0]
 800027a:	2390      	movs	r3, #144	; 0x90
 800027c:	05db      	lsls	r3, r3, #23
 800027e:	2101      	movs	r1, #1
 8000280:	430a      	orrs	r2, r1
 8000282:	601a      	str	r2, [r3, #0]
		//Set PA2 alternate function type to TIM15_CH1 (AF0) 0000:AF0 (index 0 for AFRL index 1 for AFRH)
		GPIOA->AFR[0] &= ~(1U<<8); //bitwise AND(&=), NOT(~) to set it to 0
 8000284:	2390      	movs	r3, #144	; 0x90
 8000286:	05db      	lsls	r3, r3, #23
 8000288:	6a1a      	ldr	r2, [r3, #32]
 800028a:	2390      	movs	r3, #144	; 0x90
 800028c:	05db      	lsls	r3, r3, #23
 800028e:	491d      	ldr	r1, [pc, #116]	; (8000304 <tim15_PA2_input_capture+0xc0>)
 8000290:	400a      	ands	r2, r1
 8000292:	621a      	str	r2, [r3, #32]
		GPIOA->AFR[0] &= ~(1U<<9); //bitwise AND(&=), NOT(~) to set it to 0
 8000294:	2390      	movs	r3, #144	; 0x90
 8000296:	05db      	lsls	r3, r3, #23
 8000298:	6a1a      	ldr	r2, [r3, #32]
 800029a:	2390      	movs	r3, #144	; 0x90
 800029c:	05db      	lsls	r3, r3, #23
 800029e:	491a      	ldr	r1, [pc, #104]	; (8000308 <tim15_PA2_input_capture+0xc4>)
 80002a0:	400a      	ands	r2, r1
 80002a2:	621a      	str	r2, [r3, #32]
		GPIOA->AFR[0] &= ~(1U<<10); //bitwise AND(&=), NOT(~) to set it to 0
 80002a4:	2390      	movs	r3, #144	; 0x90
 80002a6:	05db      	lsls	r3, r3, #23
 80002a8:	6a1a      	ldr	r2, [r3, #32]
 80002aa:	2390      	movs	r3, #144	; 0x90
 80002ac:	05db      	lsls	r3, r3, #23
 80002ae:	4917      	ldr	r1, [pc, #92]	; (800030c <tim15_PA2_input_capture+0xc8>)
 80002b0:	400a      	ands	r2, r1
 80002b2:	621a      	str	r2, [r3, #32]
		GPIOA->AFR[0] &= ~(1U<<11); //bitwise AND(&=), NOT(~) to set it to 0
 80002b4:	2390      	movs	r3, #144	; 0x90
 80002b6:	05db      	lsls	r3, r3, #23
 80002b8:	6a1a      	ldr	r2, [r3, #32]
 80002ba:	2390      	movs	r3, #144	; 0x90
 80002bc:	05db      	lsls	r3, r3, #23
 80002be:	4914      	ldr	r1, [pc, #80]	; (8000310 <tim15_PA2_input_capture+0xcc>)
 80002c0:	400a      	ands	r2, r1
 80002c2:	621a      	str	r2, [r3, #32]
		//Set Pre-scaler Value
		TIM15->PSC = 4800 - 1; // 8,000,0000/800 = 10,000
 80002c4:	4b13      	ldr	r3, [pc, #76]	; (8000314 <tim15_PA2_input_capture+0xd0>)
 80002c6:	4a14      	ldr	r2, [pc, #80]	; (8000318 <tim15_PA2_input_capture+0xd4>)
 80002c8:	629a      	str	r2, [r3, #40]	; 0x28
		//Set CH1 to input capture mode
		TIM15->CCMR1 &= ~(1U<<1); //0
 80002ca:	4b12      	ldr	r3, [pc, #72]	; (8000314 <tim15_PA2_input_capture+0xd0>)
 80002cc:	699a      	ldr	r2, [r3, #24]
 80002ce:	4b11      	ldr	r3, [pc, #68]	; (8000314 <tim15_PA2_input_capture+0xd0>)
 80002d0:	2102      	movs	r1, #2
 80002d2:	438a      	bics	r2, r1
 80002d4:	619a      	str	r2, [r3, #24]
		TIM15->CCMR1 |= (1U<<0); //1
 80002d6:	4b0f      	ldr	r3, [pc, #60]	; (8000314 <tim15_PA2_input_capture+0xd0>)
 80002d8:	699a      	ldr	r2, [r3, #24]
 80002da:	4b0e      	ldr	r3, [pc, #56]	; (8000314 <tim15_PA2_input_capture+0xd0>)
 80002dc:	2101      	movs	r1, #1
 80002de:	430a      	orrs	r2, r1
 80002e0:	619a      	str	r2, [r3, #24]
		//set CH2 to capture at every rising edge
		//Enable timer 3 channel 2 in capture mode
		TIM15->CCER |= CH1_OUTPUT_ENABLE;
 80002e2:	4b0c      	ldr	r3, [pc, #48]	; (8000314 <tim15_PA2_input_capture+0xd0>)
 80002e4:	6a1a      	ldr	r2, [r3, #32]
 80002e6:	4b0b      	ldr	r3, [pc, #44]	; (8000314 <tim15_PA2_input_capture+0xd0>)
 80002e8:	2101      	movs	r1, #1
 80002ea:	430a      	orrs	r2, r1
 80002ec:	621a      	str	r2, [r3, #32]
		//Enable Timer
		TIM15->CR1 |= CR1_CEN;
 80002ee:	4b09      	ldr	r3, [pc, #36]	; (8000314 <tim15_PA2_input_capture+0xd0>)
 80002f0:	681a      	ldr	r2, [r3, #0]
 80002f2:	4b08      	ldr	r3, [pc, #32]	; (8000314 <tim15_PA2_input_capture+0xd0>)
 80002f4:	2101      	movs	r1, #1
 80002f6:	430a      	orrs	r2, r1
 80002f8:	601a      	str	r2, [r3, #0]

}
 80002fa:	46c0      	nop			; (mov r8, r8)
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bd80      	pop	{r7, pc}
 8000300:	40021000 	.word	0x40021000
 8000304:	fffffeff 	.word	0xfffffeff
 8000308:	fffffdff 	.word	0xfffffdff
 800030c:	fffffbff 	.word	0xfffffbff
 8000310:	fffff7ff 	.word	0xfffff7ff
 8000314:	40014000 	.word	0x40014000
 8000318:	000012bf 	.word	0x000012bf

0800031c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800031c:	480d      	ldr	r0, [pc, #52]	; (8000354 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800031e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000320:	480d      	ldr	r0, [pc, #52]	; (8000358 <LoopForever+0x6>)
  ldr r1, =_edata
 8000322:	490e      	ldr	r1, [pc, #56]	; (800035c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000324:	4a0e      	ldr	r2, [pc, #56]	; (8000360 <LoopForever+0xe>)
  movs r3, #0
 8000326:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000328:	e002      	b.n	8000330 <LoopCopyDataInit>

0800032a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800032a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800032c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800032e:	3304      	adds	r3, #4

08000330 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000330:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000332:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000334:	d3f9      	bcc.n	800032a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000336:	4a0b      	ldr	r2, [pc, #44]	; (8000364 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000338:	4c0b      	ldr	r4, [pc, #44]	; (8000368 <LoopForever+0x16>)
  movs r3, #0
 800033a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800033c:	e001      	b.n	8000342 <LoopFillZerobss>

0800033e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800033e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000340:	3204      	adds	r2, #4

08000342 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000342:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000344:	d3fb      	bcc.n	800033e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000346:	f7ff ff0c 	bl	8000162 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800034a:	f000 f823 	bl	8000394 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800034e:	f7ff fedb 	bl	8000108 <main>

08000352 <LoopForever>:

LoopForever:
    b LoopForever
 8000352:	e7fe      	b.n	8000352 <LoopForever>
  ldr   r0, =_estack
 8000354:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000358:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800035c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000360:	080003fc 	.word	0x080003fc
  ldr r2, =_sbss
 8000364:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000368:	20000028 	.word	0x20000028

0800036c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800036c:	e7fe      	b.n	800036c <ADC1_IRQHandler>
	...

08000370 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000374:	4b05      	ldr	r3, [pc, #20]	; (800038c <HAL_IncTick+0x1c>)
 8000376:	781b      	ldrb	r3, [r3, #0]
 8000378:	001a      	movs	r2, r3
 800037a:	4b05      	ldr	r3, [pc, #20]	; (8000390 <HAL_IncTick+0x20>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	18d2      	adds	r2, r2, r3
 8000380:	4b03      	ldr	r3, [pc, #12]	; (8000390 <HAL_IncTick+0x20>)
 8000382:	601a      	str	r2, [r3, #0]
}
 8000384:	46c0      	nop			; (mov r8, r8)
 8000386:	46bd      	mov	sp, r7
 8000388:	bd80      	pop	{r7, pc}
 800038a:	46c0      	nop			; (mov r8, r8)
 800038c:	20000000 	.word	0x20000000
 8000390:	20000024 	.word	0x20000024

08000394 <__libc_init_array>:
 8000394:	b570      	push	{r4, r5, r6, lr}
 8000396:	2600      	movs	r6, #0
 8000398:	4d0c      	ldr	r5, [pc, #48]	; (80003cc <__libc_init_array+0x38>)
 800039a:	4c0d      	ldr	r4, [pc, #52]	; (80003d0 <__libc_init_array+0x3c>)
 800039c:	1b64      	subs	r4, r4, r5
 800039e:	10a4      	asrs	r4, r4, #2
 80003a0:	42a6      	cmp	r6, r4
 80003a2:	d109      	bne.n	80003b8 <__libc_init_array+0x24>
 80003a4:	2600      	movs	r6, #0
 80003a6:	f000 f819 	bl	80003dc <_init>
 80003aa:	4d0a      	ldr	r5, [pc, #40]	; (80003d4 <__libc_init_array+0x40>)
 80003ac:	4c0a      	ldr	r4, [pc, #40]	; (80003d8 <__libc_init_array+0x44>)
 80003ae:	1b64      	subs	r4, r4, r5
 80003b0:	10a4      	asrs	r4, r4, #2
 80003b2:	42a6      	cmp	r6, r4
 80003b4:	d105      	bne.n	80003c2 <__libc_init_array+0x2e>
 80003b6:	bd70      	pop	{r4, r5, r6, pc}
 80003b8:	00b3      	lsls	r3, r6, #2
 80003ba:	58eb      	ldr	r3, [r5, r3]
 80003bc:	4798      	blx	r3
 80003be:	3601      	adds	r6, #1
 80003c0:	e7ee      	b.n	80003a0 <__libc_init_array+0xc>
 80003c2:	00b3      	lsls	r3, r6, #2
 80003c4:	58eb      	ldr	r3, [r5, r3]
 80003c6:	4798      	blx	r3
 80003c8:	3601      	adds	r6, #1
 80003ca:	e7f2      	b.n	80003b2 <__libc_init_array+0x1e>
 80003cc:	080003f4 	.word	0x080003f4
 80003d0:	080003f4 	.word	0x080003f4
 80003d4:	080003f4 	.word	0x080003f4
 80003d8:	080003f8 	.word	0x080003f8

080003dc <_init>:
 80003dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003de:	46c0      	nop			; (mov r8, r8)
 80003e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003e2:	bc08      	pop	{r3}
 80003e4:	469e      	mov	lr, r3
 80003e6:	4770      	bx	lr

080003e8 <_fini>:
 80003e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ea:	46c0      	nop			; (mov r8, r8)
 80003ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ee:	bc08      	pop	{r3}
 80003f0:	469e      	mov	lr, r3
 80003f2:	4770      	bx	lr
